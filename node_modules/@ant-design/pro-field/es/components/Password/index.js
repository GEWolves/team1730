import "antd/es/input/style";
import _Input from "antd/es/input";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import "antd/es/space/style";
import _Space from "antd/es/space";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["text", "mode", "render", "renderFormItem", "fieldProps", "proFieldKey"];
import React from 'react';
import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';
import useMergedState from "rc-util/es/hooks/useMergedState";
import { useIntl } from '@ant-design/pro-provider';
/**
 * 最基本的组件，就是个普通的 Input.Password
 *
 * @param
 */

var FieldPassword = function FieldPassword(_ref, ref) {
  var text = _ref.text,
      mode = _ref.mode,
      render = _ref.render,
      renderFormItem = _ref.renderFormItem,
      fieldProps = _ref.fieldProps,
      proFieldKey = _ref.proFieldKey,
      rest = _objectWithoutProperties(_ref, _excluded);

  var intl = useIntl();

  var _useMergedState = useMergedState(function () {
    return rest.visible || false;
  }, {
    value: rest.visible,
    onChange: rest.onVisible
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      visible = _useMergedState2[0],
      setVisible = _useMergedState2[1];

  if (mode === 'read') {
    var dom = /*#__PURE__*/React.createElement(React.Fragment, null, "-");

    if (text) {
      dom = /*#__PURE__*/React.createElement(_Space, null, /*#__PURE__*/React.createElement("span", {
        ref: ref
      }, visible ? text : '＊ ＊ ＊ ＊ ＊'), /*#__PURE__*/React.createElement("a", {
        onClick: function onClick() {
          return setVisible(!visible);
        }
      }, visible ? /*#__PURE__*/React.createElement(EyeOutlined, null) : /*#__PURE__*/React.createElement(EyeInvisibleOutlined, null)));
    }

    if (render) {
      return render(text, _objectSpread({
        mode: mode
      }, fieldProps), dom);
    }

    return dom;
  }

  if (mode === 'edit' || mode === 'update') {
    var _dom = /*#__PURE__*/React.createElement(_Input.Password, _extends({
      placeholder: intl.getMessage('tableForm.inputPlaceholder', '请输入'),
      ref: ref
    }, fieldProps));

    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: mode
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};

export default /*#__PURE__*/React.forwardRef(FieldPassword);