import "antd/es/form/style";
import _Form from "antd/es/form";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import "antd/es/button/style";
import _Button from "antd/es/button";
import _extends from "@babel/runtime/helpers/esm/extends";
import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["creatorButtonProps", "deleteIconProps", "copyIconProps", "itemContainerRender", "itemRender", "prefixCls", "creatorRecord", "action", "children", "actionRender", "fields", "meta", "field", "index", "formInstance", "alwaysShowItemLabel"],
    _excluded2 = ["actionRender", "creatorButtonProps", "label", "alwaysShowItemLabel", "tooltip", "creatorRecord", "itemRender", "rules", "itemContainerRender", "copyIconProps", "children", "deleteIconProps", "actionRef", "style", "prefixCls"];
import { CopyOutlined, DeleteOutlined, PlusOutlined } from '@ant-design/icons';
import { nanoid, runFunction, ProFormContext } from '@ant-design/pro-utils';
import omit from 'omit.js';
import toArray from "rc-util/es/Children/toArray";
import { useEffect } from 'react';
import React, { useContext, useImperativeHandle, useMemo, useRef } from 'react';
import './index.less';
import { noteOnce } from "rc-util/es/warning";
var FormListContext = /*#__PURE__*/React.createContext({});
/** Antd 自带的toArray 不这次方法，所以需要自己搞一个 */

var listToArray = function listToArray(children) {
  if (Array.isArray(children)) {
    return children;
  }

  if (typeof children === 'function') {
    return [children];
  }

  return toArray(children);
};

var ProFormListItem = function ProFormListItem(props) {
  var _formInstance$getFiel;

  var creatorButtonProps = props.creatorButtonProps,
      deleteIconProps = props.deleteIconProps,
      copyIconProps = props.copyIconProps,
      itemContainerRender = props.itemContainerRender,
      itemRender = props.itemRender,
      prefixCls = props.prefixCls,
      creatorRecord = props.creatorRecord,
      action = props.action,
      children = props.children,
      actionRender = props.actionRender,
      fields = props.fields,
      meta = props.meta,
      field = props.field,
      index = props.index,
      formInstance = props.formInstance,
      alwaysShowItemLabel = props.alwaysShowItemLabel,
      rest = _objectWithoutProperties(props, _excluded);

  var listContext = useContext(FormListContext);
  var childrenArray = listToArray(children).map(function (childrenItem) {
    if (typeof childrenItem === 'function') {
      return childrenItem === null || childrenItem === void 0 ? void 0 : childrenItem(field, index, action);
    }

    return childrenItem;
  }).map(function (childrenItem) {
    if ( /*#__PURE__*/React.isValidElement(childrenItem)) {
      return /*#__PURE__*/React.cloneElement(childrenItem, _objectSpread({
        key: childrenItem.key || nanoid()
      }, childrenItem === null || childrenItem === void 0 ? void 0 : childrenItem.props));
    }

    return childrenItem;
  });
  var copyIcon = useMemo(function () {
    /** 复制按钮的配置 */
    if (!copyIconProps) return null;
    var _copyIconProps$Icon = copyIconProps.Icon,
        Icon = _copyIconProps$Icon === void 0 ? CopyOutlined : _copyIconProps$Icon,
        tooltipText = copyIconProps.tooltipText;
    return /*#__PURE__*/React.createElement(_Tooltip, {
      title: tooltipText,
      key: "copy"
    }, /*#__PURE__*/React.createElement(Icon, {
      className: "".concat(prefixCls, "-action-icon"),
      onClick: function onClick() {
        action.add(formInstance === null || formInstance === void 0 ? void 0 : formInstance.getFieldValue([listContext.listName, rest.name, field.name].filter(function (item) {
          return item !== undefined;
        }).flat(1)));
      }
    }));
  }, [action, copyIconProps, field.name, formInstance, listContext.listName, prefixCls, rest.name]);
  var deleteIcon = useMemo(function () {
    if (!deleteIconProps) return null;
    var _deleteIconProps$Icon = deleteIconProps.Icon,
        Icon = _deleteIconProps$Icon === void 0 ? DeleteOutlined : _deleteIconProps$Icon,
        tooltipText = deleteIconProps.tooltipText;
    return /*#__PURE__*/React.createElement(_Tooltip, {
      title: tooltipText,
      key: "delete"
    }, /*#__PURE__*/React.createElement(Icon, {
      className: "".concat(prefixCls, "-action-icon"),
      onClick: function onClick() {
        return action.remove(field.name);
      }
    }));
  }, [action, deleteIconProps, field.name, prefixCls]);
  var defaultActionDom = useMemo(function () {
    return [copyIcon, deleteIcon].filter(Boolean);
  }, [copyIcon, deleteIcon]);
  var actions = (actionRender === null || actionRender === void 0 ? void 0 : actionRender(field, action, defaultActionDom)) || defaultActionDom;
  var dom = actions.length > 0 ? /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-action")
  }, actions) : null;
  var options = {
    field: field,
    index: index,
    record: formInstance === null || formInstance === void 0 ? void 0 : (_formInstance$getFiel = formInstance.getFieldValue) === null || _formInstance$getFiel === void 0 ? void 0 : _formInstance$getFiel.call(formInstance, [listContext.listName, rest.name, field.name].filter(function (item) {
      return item !== undefined;
    }).flat(1)),
    fields: fields,
    operation: action,
    meta: meta
  };
  var itemContainer = (itemContainerRender === null || itemContainerRender === void 0 ? void 0 : itemContainerRender(childrenArray, options)) || childrenArray;
  var contentDom = (itemRender === null || itemRender === void 0 ? void 0 : itemRender({
    listDom: /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-container")
    }, itemContainer),
    action: dom
  }, options)) || /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-item").concat(alwaysShowItemLabel ? " ".concat(prefixCls, "-item-show-label") : ''),
    style: {
      display: 'flex',
      alignItems: 'flex-end'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-container")
  }, itemContainer), dom);
  return /*#__PURE__*/React.createElement(FormListContext.Provider, {
    key: field.name,
    value: _objectSpread(_objectSpread({}, field), {}, {
      listName: [listContext.listName, rest.originName, field.name].filter(function (item) {
        return item !== undefined;
      }).flat(1)
    })
  }, contentDom);
};

var ProFormListContainer = function ProFormListContainer(props) {
  var creatorButtonProps = props.creatorButtonProps,
      prefixCls = props.prefixCls,
      children = props.children,
      creatorRecord = props.creatorRecord,
      action = props.action,
      fields = props.fields;
  var fieldKeyMap = useRef(new Map());
  var uuidFields = useMemo(function () {
    return fields.map(function (field) {
      var _fieldKeyMap$current, _fieldKeyMap$current3;

      if (!((_fieldKeyMap$current = fieldKeyMap.current) === null || _fieldKeyMap$current === void 0 ? void 0 : _fieldKeyMap$current.has(field.key.toString()))) {
        var _fieldKeyMap$current2;

        (_fieldKeyMap$current2 = fieldKeyMap.current) === null || _fieldKeyMap$current2 === void 0 ? void 0 : _fieldKeyMap$current2.set(field.key.toString(), nanoid());
      }

      var uuid = (_fieldKeyMap$current3 = fieldKeyMap.current) === null || _fieldKeyMap$current3 === void 0 ? void 0 : _fieldKeyMap$current3.get(field.key.toString());
      return _objectSpread(_objectSpread({}, field), {}, {
        uuid: uuid
      });
    });
  }, [fields]);
  var creatorButton = useMemo(function () {
    if (creatorButtonProps === false) return null;

    var _ref = creatorButtonProps || {},
        _ref$position = _ref.position,
        position = _ref$position === void 0 ? 'bottom' : _ref$position,
        _ref$creatorButtonTex = _ref.creatorButtonText,
        creatorButtonText = _ref$creatorButtonTex === void 0 ? '添加一行数据' : _ref$creatorButtonTex;

    return /*#__PURE__*/React.createElement(_Button, _extends({
      className: "".concat(prefixCls, "-creator-button-").concat(position),
      type: "dashed",
      block: true,
      icon: /*#__PURE__*/React.createElement(PlusOutlined, null)
    }, omit(creatorButtonProps || {}, ['position', 'creatorButtonText']), {
      onClick: function onClick() {
        var index; // 如果是顶部，加到第一个，如果不是，为空就是最后一个

        if (position === 'top') index = 0;
        action.add(runFunction(creatorRecord), index);
      }
    }), creatorButtonText);
  }, [action, creatorButtonProps, creatorRecord, prefixCls]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 'max-content',
      maxWidth: '100%'
    }
  }, creatorButtonProps !== false && (creatorButtonProps === null || creatorButtonProps === void 0 ? void 0 : creatorButtonProps.position) === 'top' && creatorButton, uuidFields.map(function (field, index) {
    return /*#__PURE__*/React.createElement(ProFormListItem, _extends({}, props, {
      key: field.uuid,
      field: field,
      index: index
    }), children);
  }), creatorButtonProps !== false && (creatorButtonProps === null || creatorButtonProps === void 0 ? void 0 : creatorButtonProps.position) !== 'top' && creatorButton);
};

var ProFormList = function ProFormList(_ref2) {
  var actionRender = _ref2.actionRender,
      creatorButtonProps = _ref2.creatorButtonProps,
      label = _ref2.label,
      alwaysShowItemLabel = _ref2.alwaysShowItemLabel,
      tooltip = _ref2.tooltip,
      creatorRecord = _ref2.creatorRecord,
      itemRender = _ref2.itemRender,
      rules = _ref2.rules,
      itemContainerRender = _ref2.itemContainerRender,
      _ref2$copyIconProps = _ref2.copyIconProps,
      copyIconProps = _ref2$copyIconProps === void 0 ? {
    Icon: CopyOutlined,
    tooltipText: '复制此行'
  } : _ref2$copyIconProps,
      children = _ref2.children,
      _ref2$deleteIconProps = _ref2.deleteIconProps,
      deleteIconProps = _ref2$deleteIconProps === void 0 ? {
    Icon: DeleteOutlined,
    tooltipText: '删除此行'
  } : _ref2$deleteIconProps,
      actionRef = _ref2.actionRef,
      style = _ref2.style,
      prefixCls = _ref2.prefixCls,
      rest = _objectWithoutProperties(_ref2, _excluded2);

  var actionRefs = useRef();
  var context = useContext(_ConfigProvider.ConfigContext);
  var listContext = useContext(FormListContext);
  var baseClassName = context.getPrefixCls('pro-form-list'); // 处理 list 的嵌套

  var name = useMemo(function () {
    if (listContext.name === undefined) {
      return [rest.name].flat(1);
    }

    return [listContext.name, rest.name].flat(1);
  }, [listContext.name, rest.name]); // eslint-disable-next-line react-hooks/exhaustive-deps

  useImperativeHandle(actionRef, function () {
    return actionRefs.current;
  }, [actionRefs.current]);
  var proFormContext = useContext(ProFormContext);
  useEffect(function () {
    noteOnce(!!proFormContext.formRef, "ProFormList \u5FC5\u987B\u8981\u653E\u5230 ProForm \u4E2D,\u5426\u5219\u4F1A\u9020\u6210\u884C\u4E3A\u5F02\u5E38\u3002");
    noteOnce(!!proFormContext.formRef, "Proformlist must be placed in ProForm, otherwise it will cause abnormal behavior.");
  }, [proFormContext.formRef]);
  if (!proFormContext.formRef) return null;
  return /*#__PURE__*/React.createElement("div", {
    className: baseClassName,
    style: style
  }, /*#__PURE__*/React.createElement(_Form.Item, _extends({
    label: label,
    prefixCls: prefixCls,
    tooltip: tooltip,
    style: style
  }, rest, {
    name: undefined,
    rules: undefined
  }), /*#__PURE__*/React.createElement(_Form.List, _extends({
    rules: rules
  }, rest, {
    name: name
  }), function (fields, action, meta) {
    // 将 action 暴露给外部
    actionRefs.current = action;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProFormListContainer, {
      name: name,
      originName: rest.name,
      copyIconProps: copyIconProps,
      deleteIconProps: deleteIconProps,
      formInstance: proFormContext.formRef.current,
      prefixCls: baseClassName,
      meta: meta,
      fields: fields,
      itemContainerRender: itemContainerRender,
      itemRender: itemRender,
      creatorButtonProps: creatorButtonProps,
      creatorRecord: creatorRecord,
      actionRender: actionRender,
      action: action,
      alwaysShowItemLabel: alwaysShowItemLabel
    }, children), /*#__PURE__*/React.createElement(_Form.ErrorList, {
      errors: meta.errors
    }));
  })));
};

export { FormListContext };
export default ProFormList;