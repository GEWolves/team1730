import "antd/es/form/style";
import _Form from "antd/es/form";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { ProFormField } from '@ant-design/pro-form';
import { runFunction, isDeepEqualReact } from '@ant-design/pro-utils';
import { getFieldPropsOrFormItemProps, InlineErrorFormItem } from '@ant-design/pro-utils';
import get from "rc-util/es/utils/get";
var SHOW_EMPTY_TEXT_LIST = ['', null, undefined];
/**
 * 拼接用于编辑的 key
 *
 * @param base 基本的 key
 * @param dataIndex 需要拼接的key
 */

export var spellNamePath = function spellNamePath() {
  for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {
    rest[_key] = arguments[_key];
  }

  return rest.filter(function (index) {
    return index !== undefined;
  }).map(function (item) {
    if (typeof item === 'number') {
      return item.toString();
    }

    return item;
  }).flat(1);
};

var CellRenderFromItem = /*#__PURE__*/function (_React$Component) {
  _inherits(CellRenderFromItem, _React$Component);

  var _super = _createSuper(CellRenderFromItem);

  function CellRenderFromItem() {
    var _this;

    _classCallCheck(this, CellRenderFromItem);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      name: [],
      rowName: []
    };
    _this.functionKeys = ['onChange', 'counter', 'render', 'tableColumn'];

    _this.generateFormItem = function () {
      var _columnProps$renderFo, _counter$editableForm, _ref3;

      var _this$props = _this.props,
          config = _this$props.config,
          proFieldProps = _this$props.proFieldProps;
      var text = config.text,
          columnProps = config.columnProps,
          counter = config.counter;
      /** 获取 formItemProps Props */

      var formItemProps = getFieldPropsOrFormItemProps(columnProps === null || columnProps === void 0 ? void 0 : columnProps.formItemProps, counter.editableForm, _objectSpread(_objectSpread({
        rowKey: _this.state.rowName,
        rowIndex: config.index
      }, columnProps), {}, {
        isEditable: true
      }));

      var messageVariables = _objectSpread({
        label: (columnProps === null || columnProps === void 0 ? void 0 : columnProps.title) || '此项',
        type: (columnProps === null || columnProps === void 0 ? void 0 : columnProps.valueType) || '文本'
      }, formItemProps === null || formItemProps === void 0 ? void 0 : formItemProps.messageVariables);

      var inputDom = /*#__PURE__*/React.createElement(ProFormField, _extends({
        cacheForSwr: true,
        key: config.recordKey || config.index,
        name: _this.state.name,
        ignoreFormItem: true,
        fieldProps: getFieldPropsOrFormItemProps(columnProps === null || columnProps === void 0 ? void 0 : columnProps.fieldProps, counter === null || counter === void 0 ? void 0 : counter.editableForm, _objectSpread(_objectSpread({}, columnProps), {}, {
          rowKey: _this.state.rowName,
          rowIndex: config.index,
          isEditable: true
        }))
      }, proFieldProps));
      /** 如果没有自定义直接返回 */

      if (!(columnProps === null || columnProps === void 0 ? void 0 : columnProps.renderFormItem)) {
        var _ref;

        var dom = /*#__PURE__*/React.createElement(InlineErrorFormItem, _extends({
          key: config.recordKey || config.index,
          errorType: "popover",
          name: _this.state.name
        }, formItemProps, {
          messageVariables: messageVariables,
          initialValue: (_ref = text !== null && text !== void 0 ? text : formItemProps === null || formItemProps === void 0 ? void 0 : formItemProps.initialValue) !== null && _ref !== void 0 ? _ref : columnProps === null || columnProps === void 0 ? void 0 : columnProps.initialValue
        }), inputDom);
        return dom;
      }
      /** RenderFormItem 需要被自定义的时候执行，defaultRender 比较麻烦所以这里多包一点 */


      var renderDom = (_columnProps$renderFo = columnProps.renderFormItem) === null || _columnProps$renderFo === void 0 ? void 0 : _columnProps$renderFo.call(columnProps, _objectSpread(_objectSpread({}, columnProps), {}, {
        index: config.index,
        isEditable: true,
        type: 'table'
      }), {
        defaultRender: function defaultRender() {
          var _ref2;

          return /*#__PURE__*/React.createElement(InlineErrorFormItem, _extends({
            key: config.recordKey || config.index,
            errorType: "popover",
            name: _this.state.name
          }, formItemProps, {
            messageVariables: messageVariables,
            initialValue: (_ref2 = text !== null && text !== void 0 ? text : formItemProps === null || formItemProps === void 0 ? void 0 : formItemProps.initialValue) !== null && _ref2 !== void 0 ? _ref2 : columnProps === null || columnProps === void 0 ? void 0 : columnProps.initialValue
          }), inputDom);
        },
        type: 'form',
        recordKey: config.recordKey,
        record: counter === null || counter === void 0 ? void 0 : (_counter$editableForm = counter.editableForm) === null || _counter$editableForm === void 0 ? void 0 : _counter$editableForm.getFieldValue([config.recordKey || config.index]),
        isEditable: true
      }, counter === null || counter === void 0 ? void 0 : counter.editableForm);
      return /*#__PURE__*/React.createElement(InlineErrorFormItem, _extends({
        errorType: "popover",
        key: config.recordKey || config.index,
        name: _this.state.name
      }, formItemProps, {
        initialValue: (_ref3 = text !== null && text !== void 0 ? text : formItemProps === null || formItemProps === void 0 ? void 0 : formItemProps.initialValue) !== null && _ref3 !== void 0 ? _ref3 : columnProps === null || columnProps === void 0 ? void 0 : columnProps.initialValue,
        messageVariables: messageVariables
      }), renderDom);
    };

    return _this;
  }

  _createClass(CellRenderFromItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _config$recordKey, _ref4, _columnProps$key;

      var config = this.props.config;
      var columnProps = config.columnProps,
          prefixName = config.prefixName;
      var name = spellNamePath(prefixName, prefixName ? config.index : (_config$recordKey = config.recordKey) !== null && _config$recordKey !== void 0 ? _config$recordKey : config.index, (_ref4 = (_columnProps$key = columnProps === null || columnProps === void 0 ? void 0 : columnProps.key) !== null && _columnProps$key !== void 0 ? _columnProps$key : columnProps === null || columnProps === void 0 ? void 0 : columnProps.dataIndex) !== null && _ref4 !== void 0 ? _ref4 : config.index);
      this.setState({
        name: name,
        rowName: name.slice(0, -1)
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _config$recordKey2, _ref5, _columnProps$key2;

      var config = this.props.config;
      var columnProps = config.columnProps,
          prefixName = config.prefixName;
      var name = spellNamePath(prefixName, prefixName ? config.index : (_config$recordKey2 = config.recordKey) !== null && _config$recordKey2 !== void 0 ? _config$recordKey2 : config.index, (_ref5 = (_columnProps$key2 = columnProps === null || columnProps === void 0 ? void 0 : columnProps.key) !== null && _columnProps$key2 !== void 0 ? _columnProps$key2 : columnProps === null || columnProps === void 0 ? void 0 : columnProps.dataIndex) !== null && _ref5 !== void 0 ? _ref5 : config.index);

      if (name.toString() !== this.state.name.toString()) {
        this.setState({
          name: name,
          rowName: name.slice(0, -1)
        });
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !isDeepEqualReact(nextProps.proFieldProps, this.props.proFieldProps, this.functionKeys) || !isDeepEqualReact(nextProps.config, this.props.config, this.functionKeys) || !isDeepEqualReact(nextState, this.state);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (this.state.name.length === 0) {
        return null;
      }

      var config = this.props.config;
      var columnProps = config.columnProps;

      if (typeof (columnProps === null || columnProps === void 0 ? void 0 : columnProps.renderFormItem) === 'function' || typeof (columnProps === null || columnProps === void 0 ? void 0 : columnProps.fieldProps) === 'function' || typeof (columnProps === null || columnProps === void 0 ? void 0 : columnProps.formItemProps) === 'function') {
        return /*#__PURE__*/React.createElement(_Form.Item, {
          shouldUpdate: function shouldUpdate(pre, next) {
            return isDeepEqualReact(get(pre, _this2.state.rowName), get(next, _this2.state.rowName));
          },
          noStyle: true
        }, function () {
          return _this2.generateFormItem();
        });
      }

      return this.generateFormItem();
    }
  }]);

  return CellRenderFromItem;
}(React.Component);
/**
 * 根据不同的类型来转化数值
 *
 * @param text
 * @param valueType
 */


function cellRenderToFromItem(config) {
  var _columnProps$dataInde;

  var text = config.text,
      valueType = config.valueType,
      rowData = config.rowData,
      columnProps = config.columnProps; // 如果 valueType === text ，没必要多走一次 render

  if ((!valueType || ['textarea', 'text'].includes(valueType.toString())) && // valueEnum 存在说明是个select
  !(columnProps === null || columnProps === void 0 ? void 0 : columnProps.valueEnum) && config.mode === 'read') {
    // 如果是''、null、undefined 显示columnEmptyText
    return SHOW_EMPTY_TEXT_LIST.includes(text) ? config.columnEmptyText : text;
  }

  if (typeof valueType === 'function' && rowData) {
    // 防止valueType是函数,并且text是''、null、undefined跳过显式设置的columnEmptyText
    return cellRenderToFromItem(_objectSpread(_objectSpread({}, config), {}, {
      valueType: valueType(rowData, config.type) || 'text'
    }));
  }

  var columnKey = (columnProps === null || columnProps === void 0 ? void 0 : columnProps.key) || (columnProps === null || columnProps === void 0 ? void 0 : (_columnProps$dataInde = columnProps.dataIndex) === null || _columnProps$dataInde === void 0 ? void 0 : _columnProps$dataInde.toString());
  /** 生成公用的 proField dom 配置 */

  var proFieldProps = {
    valueEnum: runFunction(columnProps === null || columnProps === void 0 ? void 0 : columnProps.valueEnum, rowData),
    request: columnProps === null || columnProps === void 0 ? void 0 : columnProps.request,
    params: runFunction(columnProps === null || columnProps === void 0 ? void 0 : columnProps.params, rowData, columnProps),
    readonly: columnProps === null || columnProps === void 0 ? void 0 : columnProps.readonly,
    text: valueType === 'index' || valueType === 'indexBorder' ? config.index : text,
    mode: config.mode,
    renderFormItem: undefined,
    valueType: valueType,
    // @ts-ignore
    record: rowData,
    proFieldProps: {
      emptyText: config.columnEmptyText,
      proFieldKey: columnKey ? "table-field-".concat(columnKey) : undefined
    }
  };
  /** 只读模式直接返回就好了，不需要处理 formItem */

  if (config.mode !== 'edit') {
    return /*#__PURE__*/React.createElement(ProFormField, _extends({
      mode: "read",
      ignoreFormItem: true,
      fieldProps: getFieldPropsOrFormItemProps(columnProps === null || columnProps === void 0 ? void 0 : columnProps.fieldProps, null, columnProps)
    }, proFieldProps));
  }

  return /*#__PURE__*/React.createElement(CellRenderFromItem, {
    config: config,
    proFieldProps: proFieldProps
  });
}

export default cellRenderToFromItem;