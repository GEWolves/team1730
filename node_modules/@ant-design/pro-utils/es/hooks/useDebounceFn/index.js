import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { useEffect, useRef, useCallback } from 'react';

var useUpdateEffect = function useUpdateEffect(effect, deps) {
  var isMounted = useRef(false);
  useEffect(function () {
    if (!isMounted.current) {
      isMounted.current = true;
    } else {
      return effect();
    }

    return function () {
      return undefined;
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
};

function useDebounceFn(fn, deps, wait, disableAutoCancel) {
  // eslint-disable-next-line no-underscore-dangle
  var hooksDeps = Array.isArray(deps) ? deps : []; // eslint-disable-next-line no-underscore-dangle

  var hookWait = typeof deps === 'number' ? deps : wait || 0;
  var timer = useRef();
  var fnRef = useRef(fn);
  /** 如果这个方法被清理里，应该报错，这样就可以减少错误信息了 */

  var rejectRef = useRef(function () {});
  fnRef.current = fn;
  var cancel = useCallback(function () {
    if (disableAutoCancel) return;

    if (timer.current) {
      clearTimeout(timer.current);
    }
  }, [disableAutoCancel]);
  var run = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _len,
        args,
        _key,
        runFn,
        data,
        _args2 = arguments;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            for (_len = _args2.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = _args2[_key];
            }

            if (!(wait === 0)) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", fnRef.current.apply(fnRef, args));

          case 3:
            _context2.prev = 3;
            runFn = new Promise(function (resolve, reject) {
              cancel();
              rejectRef.current = reject;
              timer.current = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                var data;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return fnRef.current.apply(fnRef, args);

                      case 2:
                        data = _context.sent;
                        resolve(data);

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })), hookWait);
            });
            _context2.next = 7;
            return runFn;

          case 7:
            data = _context2.sent;
            return _context2.abrupt("return", data);

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2["catch"](3);
            // @ts-ignore
            console.warn(_context2.t0.message);

          case 14:
            return _context2.abrupt("return", undefined);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 11]]);
  })), [wait, cancel, hookWait]);
  useUpdateEffect(function () {
    run();
    return cancel;
  }, [].concat(_toConsumableArray(hooksDeps), [run])); // eslint-disable-next-line react-hooks/exhaustive-deps

  useEffect(function () {
    return function () {
      var _rejectRef$current;

      if (wait !== 0) (_rejectRef$current = rejectRef.current) === null || _rejectRef$current === void 0 ? void 0 : _rejectRef$current.call(rejectRef, new Error('useDebounceFn is unmount'));
      cancel();
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return {
    run: run,
    cancel: cancel
  };
}

export default useDebounceFn;