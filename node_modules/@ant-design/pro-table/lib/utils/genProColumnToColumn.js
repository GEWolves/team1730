"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.genProColumnToColumn = genProColumnToColumn;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _proUtils = require("@ant-design/pro-utils");

var _proField = require("@ant-design/pro-field");

var _index = require("./index");

var _columnRender = require("./columnRender");

/**
 * 转化 columns 到 pro 的格式 主要是 render 方法的自行实现
 *
 * @param columns
 * @param map
 * @param columnEmptyText
 */
function genProColumnToColumn(params) {
  var columns = params.columns,
      counter = params.counter,
      columnEmptyText = params.columnEmptyText,
      type = params.type,
      editableUtils = params.editableUtils;
  return columns.map(function (columnProps, columnsIndex) {
    var key = columnProps.key,
        dataIndex = columnProps.dataIndex,
        valueEnum = columnProps.valueEnum,
        _columnProps$valueTyp = columnProps.valueType,
        valueType = _columnProps$valueTyp === void 0 ? 'text' : _columnProps$valueTyp,
        children = columnProps.children,
        onFilter = columnProps.onFilter,
        _columnProps$filters = columnProps.filters,
        filters = _columnProps$filters === void 0 ? [] : _columnProps$filters;
    var columnKey = (0, _index.genColumnKey)(key || (dataIndex === null || dataIndex === void 0 ? void 0 : dataIndex.toString()), columnsIndex); // 这些都没有，说明是普通的表格不需要 pro 管理

    var noNeedPro = !valueEnum && !valueType && !children;

    if (noNeedPro) {
      return (0, _objectSpread2.default)({
        index: columnsIndex
      }, columnProps);
    }

    var config = counter.columnsMap[columnKey] || {
      fixed: columnProps.fixed
    };

    var genOnFilter = function genOnFilter() {
      if (onFilter === true) {
        return function (value, row) {
          return (0, _columnRender.defaultOnFilter)(value, row, dataIndex);
        };
      }

      return (0, _proUtils.omitBoolean)(onFilter);
    };

    var tempColumns = (0, _objectSpread2.default)((0, _objectSpread2.default)({
      index: columnsIndex,
      key: columnKey
    }, columnProps), {}, {
      title: (0, _columnRender.renderColumnsTitle)(columnProps),
      valueEnum: valueEnum,
      filters: filters === true ? (0, _proField.proFieldParsingValueEnumToArray)((0, _proUtils.runFunction)(valueEnum, undefined)).filter(function (valueItem) {
        return valueItem && valueItem.value !== 'all';
      }) : filters,
      onFilter: genOnFilter(),
      fixed: config.fixed,
      width: columnProps.width || (columnProps.fixed ? 200 : undefined),
      children: columnProps.children ? genProColumnToColumn((0, _objectSpread2.default)((0, _objectSpread2.default)({}, params), {}, {
        columns: columnProps === null || columnProps === void 0 ? void 0 : columnProps.children
      })) : undefined,
      render: function render(text, rowData, index) {
        var renderProps = {
          columnProps: columnProps,
          text: text,
          rowData: rowData,
          index: index,
          columnEmptyText: columnEmptyText,
          counter: counter,
          type: type,
          editableUtils: editableUtils
        };
        return (0, _columnRender.columnRender)(renderProps);
      }
    });
    return (0, _proUtils.omitUndefinedAndEmptyArr)(tempColumns);
  }).filter(function (item) {
    return !item.hideInTable;
  });
}