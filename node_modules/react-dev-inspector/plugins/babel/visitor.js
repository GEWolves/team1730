"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVisitor = exports.doJSXOpeningElement = exports.pathMatch = void 0;
const path_1 = require("path");
const generated_1 = require("@babel/types/lib/builders/generated");
const isNil = (value) => value === null || value === undefined;
/**
 * simple path match method, only use string and regex
 */
const pathMatch = (filePath, matches) => {
    if (!(matches === null || matches === void 0 ? void 0 : matches.length))
        return false;
    return matches.some((match) => {
        if (typeof match === 'string') {
            return filePath.includes(match);
        }
        else if (match instanceof RegExp) {
            return match.test(filePath);
        }
        // default is do not filter when match is illegal, so return true
        return true;
    });
};
exports.pathMatch = pathMatch;
const doJSXIdentifierName = (name) => {
    if (name.name.endsWith('Fragment')) {
        return { stop: true };
    }
    return { stop: false };
};
const doJSXMemberExpressionName = (name) => {
    return doJSXIdentifierName(name.property);
};
const doJSXNamespacedNameName = (name) => {
    return doJSXIdentifierName(name.name);
};
const doJSXPathName = (name) => {
    const visitors = {
        JSXIdentifier: doJSXIdentifierName,
        JSXMemberExpression: doJSXMemberExpressionName,
        JSXNamespacedName: doJSXNamespacedNameName,
    };
    return visitors[name.type](name);
};
const doJSXOpeningElement = (node, option) => {
    var _a, _b;
    const { stop } = doJSXPathName(node.name);
    if (stop)
        return { stop };
    const { relativePath } = option;
    const line = (_a = node.loc) === null || _a === void 0 ? void 0 : _a.start.line;
    const column = (_b = node.loc) === null || _b === void 0 ? void 0 : _b.start.column;
    const lineAttr = isNil(line)
        ? null
        : (0, generated_1.jsxAttribute)((0, generated_1.jsxIdentifier)('data-inspector-line'), (0, generated_1.stringLiteral)(line.toString()));
    const columnAttr = isNil(column)
        ? null
        : (0, generated_1.jsxAttribute)((0, generated_1.jsxIdentifier)('data-inspector-column'), (0, generated_1.stringLiteral)(column.toString()));
    const relativePathAttr = (0, generated_1.jsxAttribute)((0, generated_1.jsxIdentifier)('data-inspector-relative-path'), (0, generated_1.stringLiteral)(relativePath));
    const attributes = [lineAttr, columnAttr, relativePathAttr];
    // Make sure that there are exist together
    if (attributes.every(Boolean)) {
        node.attributes.unshift(...attributes);
    }
    return { result: node };
};
exports.doJSXOpeningElement = doJSXOpeningElement;
const memo = (handler) => {
    const cache = new Map();
    return (arg) => {
        if (cache.has(arg)) {
            return cache.get(arg);
        }
        const result = handler(arg);
        cache.set(arg, result);
        return result;
    };
};
const createVisitor = ({ cwd, excludes }) => {
    const isExclude = (excludes === null || excludes === void 0 ? void 0 : excludes.length)
        ? memo((filePath) => (0, exports.pathMatch)(filePath, excludes))
        : () => false;
    const pathRelative = memo((filePath) => (0, path_1.relative)(cwd !== null && cwd !== void 0 ? cwd : process.cwd(), filePath));
    const visitor = {
        JSXOpeningElement: {
            enter(path, state) {
                var _a, _b;
                const filePath = (_b = (_a = state === null || state === void 0 ? void 0 : state.file) === null || _a === void 0 ? void 0 : _a.opts) === null || _b === void 0 ? void 0 : _b.filename;
                if (!filePath)
                    return;
                if (isExclude(filePath))
                    return;
                const relativePath = pathRelative(filePath);
                (0, exports.doJSXOpeningElement)(path.node, {
                    relativePath,
                });
            },
        },
    };
    return visitor;
};
exports.createVisitor = createVisitor;
