"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd/es/date-picker/style");

var _datePicker = _interopRequireDefault(require("antd/es/date-picker"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

require("antd/es/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/es/config-provider"));

var _react = _interopRequireWildcard(require("react"));

var _moment = _interopRequireDefault(require("moment"));

var _proProvider = require("@ant-design/pro-provider");

var _proUtils = require("@ant-design/pro-utils");

require("./index.less");

/**
 * 日期选择组件
 *
 * @param
 */
var FieldDatePicker = function FieldDatePicker(_ref, ref) {
  var text = _ref.text,
      mode = _ref.mode,
      format = _ref.format,
      label = _ref.label,
      light = _ref.light,
      render = _ref.render,
      renderFormItem = _ref.renderFormItem,
      plain = _ref.plain,
      showTime = _ref.showTime,
      fieldProps = _ref.fieldProps,
      picker = _ref.picker,
      bordered = _ref.bordered;
  var intl = (0, _proProvider.useIntl)();
  var size = (0, _react.useContext)(_configProvider.default.SizeContext);

  var _useContext = (0, _react.useContext)(_configProvider.default.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-field-date-picker');

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  if (mode === 'read') {
    var dom = text ? (0, _moment.default)(text).format(fieldProps.format || format || 'YYYY-MM-DD') : '-';

    if (render) {
      return render(text, (0, _objectSpread2.default)({
        mode: mode
      }, fieldProps), /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, dom));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, dom);
  }

  if (mode === 'edit' || mode === 'update') {
    var _dom;

    var disabled = fieldProps.disabled,
        value = fieldProps.value,
        _onChange = fieldProps.onChange,
        allowClear = fieldProps.allowClear,
        _fieldProps$placehold = fieldProps.placeholder,
        placeholder = _fieldProps$placehold === void 0 ? intl.getMessage('tableForm.selectPlaceholder', '请选择') : _fieldProps$placehold;
    var momentValue = (0, _proUtils.parseValueToMoment)(value);

    if (light) {
      var valueStr = momentValue && momentValue.format(format) || '';
      _dom = /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "-light"),
        onClick: function onClick() {
          setOpen(true);
        }
      }, /*#__PURE__*/_react.default.createElement(_datePicker.default, (0, _extends2.default)({
        picker: picker,
        showTime: showTime,
        format: format,
        ref: ref
      }, fieldProps, {
        value: momentValue,
        onChange: function onChange(v) {
          _onChange === null || _onChange === void 0 ? void 0 : _onChange(v);
          setTimeout(function () {
            setOpen(false);
          }, 0);
        },
        onOpenChange: setOpen,
        open: open
      })), /*#__PURE__*/_react.default.createElement(_proUtils.FieldLabel, {
        label: label,
        disabled: disabled,
        placeholder: placeholder,
        size: size,
        value: valueStr,
        onClear: function onClear() {
          _onChange === null || _onChange === void 0 ? void 0 : _onChange(null);
        },
        allowClear: allowClear,
        bordered: bordered,
        expanded: open
      }));
    } else {
      _dom = /*#__PURE__*/_react.default.createElement(_datePicker.default, (0, _extends2.default)({
        picker: picker,
        showTime: showTime,
        format: format,
        placeholder: placeholder,
        bordered: plain === undefined ? true : !plain,
        ref: ref
      }, fieldProps, {
        value: momentValue
      }));
    }

    if (renderFormItem) {
      return renderFormItem(text, (0, _objectSpread2.default)({
        mode: mode
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};

var _default = /*#__PURE__*/_react.default.forwardRef(FieldDatePicker);

exports.default = _default;