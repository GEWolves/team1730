"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inspector = exports.defaultHotKeys = void 0;
const react_1 = require("react");
const hotkeys_js_1 = __importDefault(require("hotkeys-js"));
const highlight_1 = require("./utils/highlight");
const inspect_1 = require("./utils/inspect");
const Overlay_1 = __importDefault(require("./Overlay"));
exports.defaultHotKeys = ['control', 'shift', 'command', 'c'];
const Inspector = (props) => {
    const { keys, onHoverElement, onClickElement, disableLaunchEditor, children, } = props;
    // hotkeys-js params need string
    const hotkey = (keys !== null && keys !== void 0 ? keys : exports.defaultHotKeys).join('+');
    /** inspector tooltip overlay */
    const overlayRef = (0, react_1.useRef)();
    const mousePointRef = (0, react_1.useRef)({ x: 0, y: 0 });
    const recordMousePoint = ({ clientX, clientY }) => {
        mousePointRef.current.x = clientX;
        mousePointRef.current.y = clientY;
    };
    const startInspect = () => {
        const overlay = new Overlay_1.default();
        overlayRef.current = overlay;
        const stopCallback = (0, highlight_1.setupHighlighter)({
            onPointerOver: handleHoverElement,
            onClick: handleClickElement,
        });
        overlay.setRemoveCallback(stopCallback);
        // inspect element immediately at mouse point
        const initPoint = mousePointRef.current;
        const initElement = document.elementFromPoint(initPoint.x, initPoint.y);
        if (initElement)
            handleHoverElement(initElement);
    };
    const stopInspect = () => {
        var _a;
        (_a = overlayRef.current) === null || _a === void 0 ? void 0 : _a.remove();
        overlayRef.current = undefined;
    };
    const handleHoverElement = (element) => {
        var _a;
        const overlay = overlayRef.current;
        const codeInfo = (0, inspect_1.getElementCodeInfo)(element);
        const relativePath = codeInfo === null || codeInfo === void 0 ? void 0 : codeInfo.relativePath;
        const { fiber, name, title } = (0, inspect_1.getElementInspect)(element);
        (_a = overlay === null || overlay === void 0 ? void 0 : overlay.inspect) === null || _a === void 0 ? void 0 : _a.call(overlay, [element], title, relativePath);
        onHoverElement === null || onHoverElement === void 0 ? void 0 : onHoverElement({
            element,
            fiber,
            codeInfo,
            name,
        });
    };
    const handleClickElement = (element) => {
        stopInspect();
        const codeInfo = (0, inspect_1.getElementCodeInfo)(element);
        const { fiber, name } = (0, inspect_1.getElementInspect)(element);
        if (!disableLaunchEditor)
            (0, inspect_1.gotoEditor)(codeInfo);
        onClickElement === null || onClickElement === void 0 ? void 0 : onClickElement({
            element,
            fiber,
            codeInfo,
            name,
        });
    };
    (0, react_1.useEffect)(() => {
        document.addEventListener('mousemove', recordMousePoint, true);
        return () => {
            document.removeEventListener('mousemove', recordMousePoint, true);
        };
    }, []);
    (0, react_1.useEffect)(() => {
        const handleHotKeys = (event, handler) => {
            if (handler.key === hotkey) {
                overlayRef.current
                    ? stopInspect()
                    : startInspect();
            }
            else if (handler.key === 'esc' && overlayRef.current) {
                stopInspect();
            }
        };
        // https://github.com/jaywcjlove/hotkeys
        (0, hotkeys_js_1.default)(`${hotkey}, esc`, handleHotKeys);
        /**
         * @deprecated only for debug, will remove in next version
         */
        window.__REACT_DEV_INSPECTOR_TOGGLE__ = () => overlayRef.current
            ? stopInspect()
            : startInspect();
        return () => {
            hotkeys_js_1.default.unbind(`${hotkey}, esc`, handleHotKeys);
            delete window.__REACT_DEV_INSPECTOR_TOGGLE__;
        };
    }, [hotkey]);
    return children;
};
exports.Inspector = Inspector;
