"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd/es/modal/style");

var _modal = _interopRequireDefault(require("antd/es/modal"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

require("antd/es/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/es/config-provider"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _useMergedState3 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _omit = _interopRequireDefault(require("omit.js"));

var _reactDom = require("react-dom");

var _BaseForm = _interopRequireDefault(require("../../BaseForm"));

var _warning = require("rc-util/lib/warning");

var _scrollLocker = _interopRequireDefault(require("rc-util/lib/Dom/scrollLocker"));

var _excluded = ["children", "trigger", "onVisibleChange", "modalProps", "onFinish", "title", "width"];

function ModalForm(_ref) {
  var _context$locale, _context$locale$Modal, _context$locale2, _context$locale2$Moda, _rest$submitter, _rest$submitter2, _rest$submitter3;

  var children = _ref.children,
      trigger = _ref.trigger,
      onVisibleChange = _ref.onVisibleChange,
      modalProps = _ref.modalProps,
      onFinish = _ref.onFinish,
      title = _ref.title,
      width = _ref.width,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var domRef = (0, _react.useRef)(null);

  var _useMergedState = (0, _useMergedState3.default)(!!rest.visible, {
    value: rest.visible,
    onChange: onVisibleChange
  }),
      _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2),
      visible = _useMergedState2[0],
      setVisible = _useMergedState2[1];
  /** Modal dom 解除渲染之后 */


  var _useState = (0, _react.useState)(!!rest.visible),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isDestroy = _useState2[0],
      setIsDestroy = _useState2[1];

  (0, _react.useEffect)(function () {
    setIsDestroy(!!rest.visible);
  }, [rest.visible]);
  var context = (0, _react.useContext)(_configProvider.default.ConfigContext);
  var renderDom = (0, _react.useMemo)(function () {
    var _context$getPopupCont;

    if (modalProps === null || modalProps === void 0 ? void 0 : modalProps.getContainer) {
      if (typeof (modalProps === null || modalProps === void 0 ? void 0 : modalProps.getContainer) === 'function') {
        var _modalProps$getContai;

        return modalProps === null || modalProps === void 0 ? void 0 : (_modalProps$getContai = modalProps.getContainer) === null || _modalProps$getContai === void 0 ? void 0 : _modalProps$getContai.call(modalProps);
      }

      if (typeof (modalProps === null || modalProps === void 0 ? void 0 : modalProps.getContainer) === 'string') {
        return document.getElementById(modalProps === null || modalProps === void 0 ? void 0 : modalProps.getContainer);
      }

      return modalProps === null || modalProps === void 0 ? void 0 : modalProps.getContainer;
    }

    if ((modalProps === null || modalProps === void 0 ? void 0 : modalProps.getContainer) === false) {
      return false;
    }

    return context === null || context === void 0 ? void 0 : (_context$getPopupCont = context.getPopupContainer) === null || _context$getPopupCont === void 0 ? void 0 : _context$getPopupCont.call(context, document.body); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [context, modalProps, visible]);

  var _useState3 = (0, _react.useState)(function () {
    if (typeof window === 'undefined') return undefined;
    return new _scrollLocker.default({
      container: renderDom || document.body
    });
  }),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 1),
      scrollLocker = _useState4[0];

  (0, _warning.noteOnce)( // eslint-disable-next-line @typescript-eslint/dot-notation
  !rest['footer'] || !(modalProps === null || modalProps === void 0 ? void 0 : modalProps.footer), 'ModalForm 是一个 ProForm 的特殊布局，如果想自定义按钮，请使用 submit.render 自定义。');
  (0, _react.useEffect)(function () {
    if (visible) {
      var _scrollLocker$lock;

      scrollLocker === null || scrollLocker === void 0 ? void 0 : (_scrollLocker$lock = scrollLocker.lock) === null || _scrollLocker$lock === void 0 ? void 0 : _scrollLocker$lock.call(scrollLocker);
    } else {
      var _scrollLocker$unLock;

      scrollLocker === null || scrollLocker === void 0 ? void 0 : (_scrollLocker$unLock = scrollLocker.unLock) === null || _scrollLocker$unLock === void 0 ? void 0 : _scrollLocker$unLock.call(scrollLocker);
    }

    if (visible && rest.visible) {
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(true);
    }

    return function () {
      var _scrollLocker$unLock2;

      if (!visible) scrollLocker === null || scrollLocker === void 0 ? void 0 : (_scrollLocker$unLock2 = scrollLocker.unLock) === null || _scrollLocker$unLock2 === void 0 ? void 0 : _scrollLocker$unLock2.call(scrollLocker);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [visible]);
  (0, _react.useEffect)(function () {
    return function () {
      var _scrollLocker$unLock3;

      scrollLocker === null || scrollLocker === void 0 ? void 0 : (_scrollLocker$unLock3 = scrollLocker.unLock) === null || _scrollLocker$unLock3 === void 0 ? void 0 : _scrollLocker$unLock3.call(scrollLocker);
    };
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  []);
  /** 设置 trigger 的情况下，懒渲染优化性能；使之可以直接配合表格操作等场景使用 */

  var isFirstRender = (0, _react.useRef)(!(modalProps === null || modalProps === void 0 ? void 0 : modalProps.forceRender));
  /**
   * IsFirstRender.current 或者 visible 为 true 的时候就渲染 不渲染能会造成一些问题, 比如再次打开值不对了 只有手动配置
   * drawerProps?.destroyOnClose 为 true 的时候才会每次关闭的时候删除 dom
   */

  var shouldRenderFormItems = (0, _react.useMemo)(function () {
    if (isFirstRender.current && visible === false) {
      return false;
    }

    if (visible === false && (modalProps === null || modalProps === void 0 ? void 0 : modalProps.destroyOnClose)) {
      return false;
    }

    return true;
  }, [visible, modalProps === null || modalProps === void 0 ? void 0 : modalProps.destroyOnClose]);
  /** 同步 props 和 本地的 ref */

  var formRef = (0, _react.useRef)();
  /** 如果 destroyOnClose ，重置一下表单 */

  (0, _react.useEffect)(function () {
    if (visible) {
      isFirstRender.current = false;
    }
  }, [modalProps === null || modalProps === void 0 ? void 0 : modalProps.destroyOnClose, visible]);
  (0, _react.useImperativeHandle)(rest.formRef, function () {
    return formRef.current;
  });
  var renderSubmitter = rest.submitter === false ? false : (0, _objectSpread2.default)((0, _objectSpread2.default)({}, rest.submitter), {}, {
    searchConfig: (0, _objectSpread2.default)({
      submitText: (modalProps === null || modalProps === void 0 ? void 0 : modalProps.okText) || ((_context$locale = context.locale) === null || _context$locale === void 0 ? void 0 : (_context$locale$Modal = _context$locale.Modal) === null || _context$locale$Modal === void 0 ? void 0 : _context$locale$Modal.okText) || '确认',
      resetText: (modalProps === null || modalProps === void 0 ? void 0 : modalProps.cancelText) || ((_context$locale2 = context.locale) === null || _context$locale2 === void 0 ? void 0 : (_context$locale2$Moda = _context$locale2.Modal) === null || _context$locale2$Moda === void 0 ? void 0 : _context$locale2$Moda.cancelText) || '取消'
    }, (_rest$submitter = rest.submitter) === null || _rest$submitter === void 0 ? void 0 : _rest$submitter.searchConfig),
    submitButtonProps: (0, _objectSpread2.default)({
      type: (modalProps === null || modalProps === void 0 ? void 0 : modalProps.okType) || 'primary'
    }, (_rest$submitter2 = rest.submitter) === null || _rest$submitter2 === void 0 ? void 0 : _rest$submitter2.submitButtonProps),
    resetButtonProps: (0, _objectSpread2.default)({
      preventDefault: true,
      onClick: function onClick(e) {
        var _modalProps$onCancel;

        modalProps === null || modalProps === void 0 ? void 0 : (_modalProps$onCancel = modalProps.onCancel) === null || _modalProps$onCancel === void 0 ? void 0 : _modalProps$onCancel.call(modalProps, e);
        setVisible(false);
      }
    }, (_rest$submitter3 = rest.submitter) === null || _rest$submitter3 === void 0 ? void 0 : _rest$submitter3.resetButtonProps)
  });

  var formDom = /*#__PURE__*/_react.default.createElement("div", {
    ref: domRef,
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, /*#__PURE__*/_react.default.createElement(_BaseForm.default, (0, _extends2.default)({
    formComponentType: "ModalForm",
    layout: "vertical"
  }, (0, _omit.default)(rest, ['visible']), {
    formRef: formRef,
    onInit: function onInit(value, form) {
      var _rest$onInit;

      if (rest.formRef) {
        rest.formRef.current = form;
      }

      rest === null || rest === void 0 ? void 0 : (_rest$onInit = rest.onInit) === null || _rest$onInit === void 0 ? void 0 : _rest$onInit.call(rest, value, form);
    },
    onFinish: /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(values) {
        var success;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (onFinish) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.next = 4;
                return onFinish(values);

              case 4:
                success = _context.sent;

                if (success) {
                  setVisible(false);
                  setTimeout(function () {
                    var _formRef$current;

                    if (modalProps === null || modalProps === void 0 ? void 0 : modalProps.destroyOnClose) (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.resetFields();
                  }, 300);
                }

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(),
    submitter: renderSubmitter,
    contentRender: function contentRender(item, submitter) {
      return /*#__PURE__*/_react.default.createElement(_modal.default, (0, _extends2.default)({
        title: title,
        width: width || 800
      }, modalProps, {
        afterClose: function afterClose() {
          var _modalProps$afterClos;

          setIsDestroy(false);
          modalProps === null || modalProps === void 0 ? void 0 : (_modalProps$afterClos = modalProps.afterClose) === null || _modalProps$afterClos === void 0 ? void 0 : _modalProps$afterClos.call(modalProps);
        },
        getContainer: false,
        visible: visible,
        onCancel: function onCancel(e) {
          var _modalProps$onCancel2;

          setVisible(false);
          modalProps === null || modalProps === void 0 ? void 0 : (_modalProps$onCancel2 = modalProps.onCancel) === null || _modalProps$onCancel2 === void 0 ? void 0 : _modalProps$onCancel2.call(modalProps, e);
        },
        footer: submitter === undefined ? null : submitter
      }), shouldRenderFormItems ? item : null);
    }
  }), children));
  /** 这个是为了支持 ssr */


  var portalRenderDom = (0, _react.useMemo)(function () {
    if (typeof window === 'undefined') return undefined;
    return renderDom || document.body;
  }, [renderDom]);

  var triggerDom = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
    key: "trigger"
  }, trigger && /*#__PURE__*/_react.default.cloneElement(trigger, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, trigger.props), {}, {
    onClick: function () {
      var _onClick = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(e) {
        var _trigger$props, _trigger$props$onClic;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                setVisible(!visible);
                setIsDestroy(!isDestroy);
                (_trigger$props = trigger.props) === null || _trigger$props === void 0 ? void 0 : (_trigger$props$onClic = _trigger$props.onClick) === null || _trigger$props$onClic === void 0 ? void 0 : _trigger$props$onClic.call(_trigger$props, e);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function onClick(_x2) {
        return _onClick.apply(this, arguments);
      }

      return onClick;
    }()
  })));
  /** 如果destroyOnClose，关闭的时候接触渲染Form */


  if ((modalProps === null || modalProps === void 0 ? void 0 : modalProps.destroyOnClose) && !isDestroy) return triggerDom;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderDom !== false && portalRenderDom ? /*#__PURE__*/(0, _reactDom.createPortal)(formDom, portalRenderDom) : formDom, triggerDom);
}

var _default = ModalForm;
exports.default = _default;