import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
var _excluded = ["fieldProps", "children", "labelCol", "label", "autoFocus", "isDefaultDom", "render", "proFieldProps", "renderFormItem", "valueType", "initialValue", "onChange", "valueEnum", "params", "name", "cacheForSwr", "valuePropName"],
    _excluded2 = ["fieldProps", "children", "labelCol", "label", "autoFocus", "isDefaultDom", "render", "proFieldProps", "renderFormItem", "valueType", "initialValue", "onChange", "valueEnum", "params", "name"];

/* eslint-disable @typescript-eslint/ban-types */
import React from 'react';
import ProField from '@ant-design/pro-field';
import { runFunction, isDeepEqualReact } from '@ant-design/pro-utils';
import createField from '../../BaseForm/createField';
import ProFormDependency from '../Dependency';

var ProFormField = /*#__PURE__*/function (_React$Component) {
  _inherits(ProFormField, _React$Component);

  var _super = _createSuper(ProFormField);

  function ProFormField() {
    var _this;

    _classCallCheck(this, ProFormField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.filedRef = /*#__PURE__*/React.createRef();
    return _this;
  }

  _createClass(ProFormField, [{
    key: "renderDom",
    value: function renderDom(values) {
      var _this$props = this.props,
          fieldProps = _this$props.fieldProps,
          children = _this$props.children,
          labelCol = _this$props.labelCol,
          label = _this$props.label,
          autoFocus = _this$props.autoFocus,
          isDefaultDom = _this$props.isDefaultDom,
          render = _this$props.render,
          proFieldProps = _this$props.proFieldProps,
          renderFormItem = _this$props.renderFormItem,
          valueType = _this$props.valueType,
          initialValue = _this$props.initialValue,
          _onChange = _this$props.onChange,
          valueEnum = _this$props.valueEnum,
          params = _this$props.params,
          name = _this$props.name,
          _this$props$cacheForS = _this$props.cacheForSwr,
          cacheForSwr = _this$props$cacheForS === void 0 ? false : _this$props$cacheForS,
          _this$props$valueProp = _this$props.valuePropName,
          valuePropName = _this$props$valueProp === void 0 ? 'value' : _this$props$valueProp,
          restProps = _objectWithoutProperties(_this$props, _excluded);

      var propsParams = values ? _objectSpread(_objectSpread({}, params), values || {}) : params;
      return /*#__PURE__*/React.createElement(ProField, _extends({
        valuePropName: valuePropName,
        text: fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps[valuePropName],
        render: render,
        renderFormItem: renderFormItem,
        valueType: valueType || 'text',
        cacheForSwr: cacheForSwr,
        fieldProps: _objectSpread(_objectSpread({
          autoFocus: autoFocus
        }, fieldProps), {}, {
          onChange: function onChange() {
            for (var _len2 = arguments.length, restParams = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              restParams[_key2] = arguments[_key2];
            }

            if (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.onChange) {
              var _fieldProps$onChange;

              fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$onChange = fieldProps.onChange) === null || _fieldProps$onChange === void 0 ? void 0 : _fieldProps$onChange.call.apply(_fieldProps$onChange, [fieldProps].concat(restParams));
              return;
            }

            _onChange === null || _onChange === void 0 ? void 0 : _onChange.apply(void 0, restParams);
          }
        }),
        valueEnum: runFunction(valueEnum)
      }, proFieldProps, restProps, {
        mode: (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.mode) || 'edit',
        params: propsParams,
        ref: this.filedRef
      }));
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return !isDeepEqualReact(nextProps, this.props, ['onChange', 'onBlur']);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          fieldProps = _this$props2.fieldProps,
          children = _this$props2.children,
          labelCol = _this$props2.labelCol,
          label = _this$props2.label,
          autoFocus = _this$props2.autoFocus,
          isDefaultDom = _this$props2.isDefaultDom,
          render = _this$props2.render,
          proFieldProps = _this$props2.proFieldProps,
          renderFormItem = _this$props2.renderFormItem,
          valueType = _this$props2.valueType,
          initialValue = _this$props2.initialValue,
          _onChange2 = _this$props2.onChange,
          valueEnum = _this$props2.valueEnum,
          params = _this$props2.params,
          name = _this$props2.name,
          restProps = _objectWithoutProperties(_this$props2, _excluded2); // 防止 formItem 的值被吃掉


      if (children) {
        if ( /*#__PURE__*/React.isValidElement(children)) {
          return /*#__PURE__*/React.cloneElement(children, _objectSpread(_objectSpread({}, restProps), {}, {
            onChange: function onChange() {
              for (var _len3 = arguments.length, restParams = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                restParams[_key3] = arguments[_key3];
              }

              if (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.onChange) {
                var _fieldProps$onChange2;

                fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$onChange2 = fieldProps.onChange) === null || _fieldProps$onChange2 === void 0 ? void 0 : _fieldProps$onChange2.call.apply(_fieldProps$onChange2, [fieldProps].concat(restParams));
                return;
              }

              _onChange2 === null || _onChange2 === void 0 ? void 0 : _onChange2.apply(void 0, restParams);
            }
          }, children.props));
        }

        return children;
      }

      if (restProps.dependencies && restProps.request) {
        return /*#__PURE__*/React.createElement(ProFormDependency, {
          name: restProps.dependencies
        }, function (values) {
          return _this2.renderDom(values);
        });
      }

      return this.renderDom();
    }
  }]);

  return ProFormField;
}(React.Component);

export default createField(ProFormField);