"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd/es/upload/style");

var _upload = _interopRequireDefault(require("antd/es/upload"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

require("antd/es/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/es/config-provider"));

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@ant-design/icons");

var _createField = _interopRequireDefault(require("../../BaseForm/createField"));

/**
 * 拖动上传组件
 *
 * @param
 */
var ProFormUploadDragger = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var fieldProps = _ref.fieldProps,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? '单击或拖动文件到此区域进行上传' : _ref$title,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? /*#__PURE__*/_react.default.createElement(_icons.InboxOutlined, null) : _ref$icon,
      _ref$description = _ref.description,
      description = _ref$description === void 0 ? '支持单次或批量上传' : _ref$description,
      action = _ref.action,
      accept = _ref.accept,
      _onChange = _ref.onChange,
      value = _ref.value,
      children = _ref.children,
      max = _ref.max,
      proFieldProps = _ref.proFieldProps;
  var context = (0, _react.useContext)(_configProvider.default.ConfigContext);
  var baseClassName = context.getPrefixCls('upload'); // 如果配置了 max ，并且 超过了文件列表的大小，就不展示按钮

  var showUploadButton = (max === undefined || !value || (value === null || value === void 0 ? void 0 : value.length) < max) && (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.mode) !== 'read' && (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.readonly) !== true;
  return /*#__PURE__*/_react.default.createElement(_upload.default.Dragger, (0, _extends2.default)({
    // @ts-ignore
    ref: ref,
    name: "files",
    action: action,
    accept: accept,
    fileList: value
  }, fieldProps, {
    onChange: function onChange(info) {
      _onChange === null || _onChange === void 0 ? void 0 : _onChange(info);

      if (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.onChange) {
        fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.onChange(info);
      }
    },
    style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.style), {}, {
      display: !showUploadButton ? 'none' : undefined
    })
  }), /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(baseClassName, "-drag-icon")
  }, icon), /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(baseClassName, "-text")
  }, title), /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(baseClassName, "-hint")
  }, description), children ? /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(baseClassName, "-extra"),
    style: {
      padding: 16
    }
  }, children) : null);
});

var _default = (0, _createField.default)(ProFormUploadDragger, {
  getValueFromEvent: function getValueFromEvent(value) {
    return value.fileList;
  }
});

exports.default = _default;