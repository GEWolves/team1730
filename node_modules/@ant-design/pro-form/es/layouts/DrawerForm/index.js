import "antd/es/drawer/style";
import _Drawer from "antd/es/drawer";
import _extends from "@babel/runtime/helpers/esm/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "trigger", "onVisibleChange", "drawerProps", "onFinish", "title", "width"];
import React, { useContext, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';
import useMergedState from "rc-util/es/hooks/useMergedState";
import { createPortal } from 'react-dom';
import omit from 'omit.js';
import BaseForm from '../../BaseForm';
import { noteOnce } from "rc-util/es/warning";
import ScrollLocker from "rc-util/es/Dom/scrollLocker";

function DrawerForm(_ref) {
  var _rest$submitter, _rest$submitter2;

  var children = _ref.children,
      trigger = _ref.trigger,
      onVisibleChange = _ref.onVisibleChange,
      drawerProps = _ref.drawerProps,
      onFinish = _ref.onFinish,
      title = _ref.title,
      width = _ref.width,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useMergedState = useMergedState(!!rest.visible, {
    value: rest.visible,
    onChange: onVisibleChange
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      visible = _useMergedState2[0],
      setVisible = _useMergedState2[1];

  var _useMergedState3 = useMergedState(0),
      _useMergedState4 = _slicedToArray(_useMergedState3, 2),
      key = _useMergedState4[0],
      setKey = _useMergedState4[1];

  var context = useContext(_ConfigProvider.ConfigContext);
  /** Modal dom 解除渲染之后 */

  var _useMergedState5 = useMergedState(!!rest.visible),
      _useMergedState6 = _slicedToArray(_useMergedState5, 2),
      isDestroy = _useMergedState6[0],
      setIsDestroy = _useMergedState6[1];

  useEffect(function () {
    setIsDestroy(!!rest.visible); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [rest.visible]);
  var renderDom = useMemo(function () {
    var _context$getPopupCont;

    if ((drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.getContainer) === false) {
      return false;
    }

    if (drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.getContainer) {
      if (typeof (drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.getContainer) === 'function') {
        var _drawerProps$getConta;

        return drawerProps === null || drawerProps === void 0 ? void 0 : (_drawerProps$getConta = drawerProps.getContainer) === null || _drawerProps$getConta === void 0 ? void 0 : _drawerProps$getConta.call(drawerProps);
      }

      if (typeof (drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.getContainer) === 'string') {
        return document.getElementById(drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.getContainer);
      }

      return drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.getContainer;
    }

    return context === null || context === void 0 ? void 0 : (_context$getPopupCont = context.getPopupContainer) === null || _context$getPopupCont === void 0 ? void 0 : _context$getPopupCont.call(context, document.body); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [context, drawerProps, visible]);

  var _useState = useState(function () {
    if (typeof window === 'undefined') return undefined;
    return new ScrollLocker({
      container: renderDom || document.body
    });
  }),
      _useState2 = _slicedToArray(_useState, 1),
      scrollLocker = _useState2[0];

  noteOnce( // eslint-disable-next-line @typescript-eslint/dot-notation
  !rest['footer'] || !(drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.footer), 'DrawerForm 是一个 ProForm 的特殊布局，如果想自定义按钮，请使用 submit.render 自定义。');
  useEffect(function () {
    if (visible) {
      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.lock();
    } else {
      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();
    }

    if (visible && rest.visible) {
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(true);
    } // 如果打开了窗口，并且是用户设置的 visible，就触发一下重新更新


    if (visible && rest.visible && (drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.destroyOnClose)) {
      setKey(key + 1);
    }

    return function () {
      var _scrollLocker$unLock;

      if (!visible) scrollLocker === null || scrollLocker === void 0 ? void 0 : (_scrollLocker$unLock = scrollLocker.unLock) === null || _scrollLocker$unLock === void 0 ? void 0 : _scrollLocker$unLock.call(scrollLocker);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [visible]);
  /** 设置 trigger 的情况下，懒渲染优化性能；使之可以直接配合表格操作等场景使用 */

  var isFirstRender = useRef(!(drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.forceRender));
  /**
   * IsFirstRender.current 或者 visible 为 true 的时候就渲染 不渲染能会造成一些问题,比如再次打开值不对了 只有手动配置
   * drawerProps?.destroyOnClose 为 true 的时候才会每次关闭的时候删除 dom
   */

  var shouldRenderFormItems = useMemo(function () {
    if (isFirstRender.current && visible === false) {
      return false;
    }

    if (visible === false && (drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.destroyOnClose)) {
      return false;
    }

    return true;
  }, [visible, drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.destroyOnClose]);
  /** 同步 props 和 本地 */

  var formRef = useRef();
  /** 如果 destroyOnClose ，重置一下表单 */

  useEffect(function () {
    if (visible) {
      isFirstRender.current = false;
    }
  }, [drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.destroyOnClose, visible]);
  useEffect(function () {
    return function () {
      var _scrollLocker$unLock2;

      scrollLocker === null || scrollLocker === void 0 ? void 0 : (_scrollLocker$unLock2 = scrollLocker.unLock) === null || _scrollLocker$unLock2 === void 0 ? void 0 : _scrollLocker$unLock2.call(scrollLocker);
    };
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  []);
  useImperativeHandle(rest.formRef, function () {
    return formRef.current;
  });
  var formDom = /*#__PURE__*/React.createElement("div", {
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, /*#__PURE__*/React.createElement(BaseForm, _extends({
    formComponentType: "DrawerForm",
    layout: "vertical",
    key: key
  }, omit(rest, ['visible']), {
    formRef: formRef,
    onInit: function onInit(value, form) {
      var _rest$onInit;

      if (rest.formRef) {
        rest.formRef.current = form;
      }

      rest === null || rest === void 0 ? void 0 : (_rest$onInit = rest.onInit) === null || _rest$onInit === void 0 ? void 0 : _rest$onInit.call(rest, value, form);
    },
    submitter: rest.submitter === false ? false : _objectSpread(_objectSpread({}, rest.submitter), {}, {
      searchConfig: _objectSpread({
        submitText: '确认',
        resetText: '取消'
      }, (_rest$submitter = rest.submitter) === null || _rest$submitter === void 0 ? void 0 : _rest$submitter.searchConfig),
      resetButtonProps: _objectSpread({
        preventDefault: true,
        onClick: function onClick(e) {
          var _drawerProps$onClose;

          setVisible(false);
          drawerProps === null || drawerProps === void 0 ? void 0 : (_drawerProps$onClose = drawerProps.onClose) === null || _drawerProps$onClose === void 0 ? void 0 : _drawerProps$onClose.call(drawerProps, e);
        }
      }, (_rest$submitter2 = rest.submitter) === null || _rest$submitter2 === void 0 ? void 0 : _rest$submitter2.resetButtonProps)
    }),
    onFinish: /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {
        var success;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (onFinish) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.next = 4;
                return onFinish(values);

              case 4:
                success = _context.sent;

                if (success) {
                  setVisible(false);
                  setTimeout(function () {
                    var _formRef$current;

                    if (drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.destroyOnClose) (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.resetFields();
                  }, 300);
                }

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(),
    contentRender: function contentRender(item, submitter) {
      return /*#__PURE__*/React.createElement(_Drawer, _extends({
        title: title,
        width: width || 800
      }, drawerProps, {
        getContainer: false,
        visible: visible,
        onClose: function onClose(e) {
          var _drawerProps$onClose2;

          setVisible(false);
          drawerProps === null || drawerProps === void 0 ? void 0 : (_drawerProps$onClose2 = drawerProps.onClose) === null || _drawerProps$onClose2 === void 0 ? void 0 : _drawerProps$onClose2.call(drawerProps, e); // drawer 的after close 在暂时有点问题，先用这个顶一下

          setTimeout(function () {
            setIsDestroy(false);
          }, 300);
        },
        footer: !!submitter && /*#__PURE__*/React.createElement("div", {
          style: {
            display: 'flex',
            justifyContent: 'flex-end'
          }
        }, submitter)
      }), shouldRenderFormItems ? item : null);
    }
  }), children));
  /** 这个是为了支持 ssr */

  var portalRenderDom = useMemo(function () {
    if (typeof window === 'undefined') return undefined;
    return renderDom || document.body;
  }, [renderDom]);
  var triggerDom = /*#__PURE__*/React.createElement(React.Fragment, {
    key: "trigger"
  }, trigger && /*#__PURE__*/React.cloneElement(trigger, _objectSpread(_objectSpread({}, trigger.props), {}, {
    onClick: function () {
      var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {
        var _trigger$props, _trigger$props$onClic;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                setVisible(!visible);
                setIsDestroy(!visible);
                (_trigger$props = trigger.props) === null || _trigger$props === void 0 ? void 0 : (_trigger$props$onClic = _trigger$props.onClick) === null || _trigger$props$onClic === void 0 ? void 0 : _trigger$props$onClic.call(_trigger$props, e);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function onClick(_x2) {
        return _onClick.apply(this, arguments);
      }

      return onClick;
    }()
  })));
  /** 如果destroyOnClose，关闭的时候解除渲染Form */

  if ((drawerProps === null || drawerProps === void 0 ? void 0 : drawerProps.destroyOnClose) && !isDestroy) return triggerDom;
  /** 不放到 body 上会导致 z-index 的问题 遮罩什么的都遮不住了 */

  return /*#__PURE__*/React.createElement(React.Fragment, null, renderDom !== false && portalRenderDom ? /*#__PURE__*/createPortal(formDom, portalRenderDom) : formDom, triggerDom);
}

export default DrawerForm;