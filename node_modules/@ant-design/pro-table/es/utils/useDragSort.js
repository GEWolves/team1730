import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["className", "style"];
import { SortableContainer, SortableElement } from 'react-sortable-hoc';
import React, { useCallback } from 'react';
import { sortData } from './index';
export function useDragSort(props) {
  var _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      onDragSortEnd = props.onDragSortEnd,
      dragSortKey = props.dragSortKey; // 拖拽排序相关逻辑

  var SortableItem = SortableElement(function (p) {
    return /*#__PURE__*/React.createElement("tr", p);
  });
  var SortContainer = SortableContainer(function (p) {
    return /*#__PURE__*/React.createElement("tbody", p);
  });
  /* istanbul ignore next */

  var handleSortEnd = useCallback(function (params) {
    /* istanbul ignore next */
    var newDs = sortData(params, data);
    /* istanbul ignore next */

    if (newDs && onDragSortEnd) {
      /* istanbul ignore next */
      onDragSortEnd(newDs);
    }
  }, [data, onDragSortEnd]);

  var DraggableContainer = function DraggableContainer(p) {
    return /*#__PURE__*/React.createElement(SortContainer, _extends({
      useDragHandle: true,
      disableAutoscroll: true,
      helperClass: "row-dragging",
      onSortEnd: handleSortEnd
    }, p));
  };

  var DraggableBodyRow = function DraggableBodyRow(p) {
    var DraggableBodyRowClassName = p.className,
        DraggableBodyRowStyle = p.style,
        restProps = _objectWithoutProperties(p, _excluded); // function findIndex base on Table rowKey props and should always be a right array index


    var index = data.findIndex(function (x) {
      var _props$rowKey;

      return x[(_props$rowKey = props.rowKey) !== null && _props$rowKey !== void 0 ? _props$rowKey : 'index'] === restProps['data-row-key'];
    });
    return /*#__PURE__*/React.createElement(SortableItem, _extends({
      index: index
    }, restProps));
  };

  var components = props.components || {};

  if (dragSortKey) {
    var _props$components;

    components.body = _objectSpread(_objectSpread({}, ((_props$components = props.components) === null || _props$components === void 0 ? void 0 : _props$components.body) || {}), {}, {
      wrapper: DraggableContainer,
      row: DraggableBodyRow
    });
  }

  return {
    components: components
  };
}