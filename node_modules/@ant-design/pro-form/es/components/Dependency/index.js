import "antd/es/form/style";
import _Form from "antd/es/form";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["name", "children", "ignoreFormListField"];
import React from "react";
import get from "rc-util/es/utils/get";
import { useContext, useMemo } from 'react';
import set from "rc-util/es/utils/set";
import { FormListContext } from '../List';
import { ProFormContext, merge, isDeepEqualReact } from '@ant-design/pro-utils';

var ProFormDependency = function ProFormDependency(_ref) {
  var name = _ref.name,
      children = _ref.children,
      ignoreFormListField = _ref.ignoreFormListField,
      rest = _objectWithoutProperties(_ref, _excluded);

  var context = useContext(ProFormContext); // ProFromList 的 filed，里面有name和key

  var formListField = useContext(FormListContext);
  var names = useMemo(function () {
    if (formListField.name === undefined) {
      return name;
    }

    return name.map(function (itemName) {
      return [formListField.listName, itemName].flat(1);
    });
  }, [formListField.listName, formListField.name, name]);
  return /*#__PURE__*/React.createElement(_Form.Item, _extends({}, rest, {
    noStyle: true,
    shouldUpdate: function shouldUpdate(prevValues, nextValues, info) {
      var _rest$shouldUpdate;

      var finalNames = names; // ignoreFormListField 为 true 时，应从全局取值，要将 names 中各项的路径前缀(formListField.listName)剥离掉

      if (ignoreFormListField && Array.isArray(formListField.listName) && formListField.listName.length > 0) {
        finalNames = names.map(function (nameItem) {
          return Array.isArray(nameItem) ? nameItem.slice(formListField.listName.length) : nameItem;
        });
      }

      if (rest.shouldUpdate === false) return false;
      if (rest.shouldUpdate === true) return true;
      var isUpdate = finalNames.some(function (nameItem) {
        var arrayName = Array.isArray(nameItem) ? nameItem : [nameItem];
        return !isDeepEqualReact(get(prevValues, arrayName), get(nextValues, arrayName));
      });
      if (rest.shouldUpdate === undefined) return isUpdate;
      var shouldUpdate = (_rest$shouldUpdate = rest.shouldUpdate) === null || _rest$shouldUpdate === void 0 ? void 0 : _rest$shouldUpdate.call(rest, prevValues, nextValues, info);
      return isUpdate && !!shouldUpdate;
    }
  }), function (form) {
    // 不在 FormList 中时，返回声明的全局依赖值
    if (formListField.name === undefined) {
      var values = names.reduce(function (pre, next) {
        var _context$getFieldsFor;

        var value = context === null || context === void 0 ? void 0 : (_context$getFieldsFor = context.getFieldsFormatValue) === null || _context$getFieldsFor === void 0 ? void 0 : _context$getFieldsFor.call(context, [next]);
        var noFormatValue = form.getFieldsValue([next]);
        return merge({}, pre, noFormatValue, value);
      }, {});
      return children === null || children === void 0 ? void 0 : children(_objectSpread({}, values), form);
    } // 在 FormList 中时
    // ignoreFormListField === true 时取全局依赖值


    if (ignoreFormListField) {
      var _nameValues = name.reduce(function (pre, namePath) {
        var finalNamePath = [namePath].flat(1);
        var fieldValue = form.getFieldValue(finalNamePath);
        return set(pre, [namePath].flat(1), fieldValue, false);
      }, {});

      return children === null || children === void 0 ? void 0 : children(_objectSpread({}, _nameValues), form);
    } // ignoreFormListField === false 时，取局部依赖值


    var nameValues = name.reduce(function (pre, namePath) {
      var _context$getFieldForm, _context$getFieldForm2;

      var finalNamePath = [formListField.listName, namePath].flat(1);
      var fieldValue = (_context$getFieldForm = (_context$getFieldForm2 = context.getFieldFormatValue) === null || _context$getFieldForm2 === void 0 ? void 0 : _context$getFieldForm2.call(context, finalNamePath)) !== null && _context$getFieldForm !== void 0 ? _context$getFieldForm : form.getFieldValue(finalNamePath);
      return set(pre, [namePath].flat(1), fieldValue, false);
    }, {});
    return children === null || children === void 0 ? void 0 : children(_objectSpread({}, nameValues), form);
  });
};

export default ProFormDependency;