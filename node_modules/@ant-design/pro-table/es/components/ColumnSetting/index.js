import "antd/es/popover/style";
import _Popover from "antd/es/popover";
import "antd/es/space/style";
import _Space from "antd/es/space";
import "antd/es/checkbox/style";
import _Checkbox from "antd/es/checkbox";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import "antd/es/tree/style";
import _Tree from "antd/es/tree";
import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
var _excluded = ["key", "dataIndex", "children"];
import React, { useContext, useEffect, useMemo, useRef } from 'react';
import { useIntl } from '@ant-design/pro-provider';
import { SettingOutlined, VerticalAlignMiddleOutlined, VerticalAlignTopOutlined, VerticalAlignBottomOutlined } from '@ant-design/icons';
import classNames from 'classnames';
import omit from 'omit.js';
import Container from '../../container';
import { genColumnKey } from '../../utils/index';
import './index.less';
import { omitUndefined, useRefFunction } from '@ant-design/pro-utils';

var ToolTipIcon = function ToolTipIcon(_ref) {
  var title = _ref.title,
      show = _ref.show,
      children = _ref.children,
      columnKey = _ref.columnKey,
      fixed = _ref.fixed;

  var _Container$useContain = Container.useContainer(),
      columnsMap = _Container$useContain.columnsMap,
      setColumnsMap = _Container$useContain.setColumnsMap;

  if (!show) {
    return null;
  }

  return /*#__PURE__*/React.createElement(_Tooltip, {
    title: title
  }, /*#__PURE__*/React.createElement("span", {
    onClick: function onClick(e) {
      var _config$disable;

      e.stopPropagation();
      e.preventDefault();
      var config = columnsMap[columnKey] || {};
      var disableIcon = typeof config.disable === 'boolean' ? config.disable : (_config$disable = config.disable) === null || _config$disable === void 0 ? void 0 : _config$disable.icon;
      if (disableIcon) return;

      var columnKeyMap = _objectSpread(_objectSpread({}, columnsMap), {}, _defineProperty({}, columnKey, _objectSpread(_objectSpread({}, config), {}, {
        fixed: fixed
      })));

      setColumnsMap(columnKeyMap);
    }
  }, children));
};

var CheckboxListItem = function CheckboxListItem(_ref2) {
  var columnKey = _ref2.columnKey,
      isLeaf = _ref2.isLeaf,
      title = _ref2.title,
      className = _ref2.className,
      fixed = _ref2.fixed;
  var intl = useIntl();
  var dom = /*#__PURE__*/React.createElement("span", {
    className: "".concat(className, "-list-item-option")
  }, /*#__PURE__*/React.createElement(ToolTipIcon, {
    columnKey: columnKey,
    fixed: "left",
    title: intl.getMessage('tableToolBar.leftPin', '固定在列首'),
    show: fixed !== 'left'
  }, /*#__PURE__*/React.createElement(VerticalAlignTopOutlined, null)), /*#__PURE__*/React.createElement(ToolTipIcon, {
    columnKey: columnKey,
    fixed: undefined,
    title: intl.getMessage('tableToolBar.noPin', '不固定'),
    show: !!fixed
  }, /*#__PURE__*/React.createElement(VerticalAlignMiddleOutlined, null)), /*#__PURE__*/React.createElement(ToolTipIcon, {
    columnKey: columnKey,
    fixed: "right",
    title: intl.getMessage('tableToolBar.rightPin', '固定在列尾'),
    show: fixed !== 'right'
  }, /*#__PURE__*/React.createElement(VerticalAlignBottomOutlined, null)));
  return /*#__PURE__*/React.createElement("span", {
    className: "".concat(className, "-list-item"),
    key: columnKey
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(className, "-list-item-title")
  }, title), !isLeaf ? dom : null);
};

var CheckboxList = function CheckboxList(_ref3) {
  var _treeDataConfig$list, _treeDataConfig$list2;

  var list = _ref3.list,
      draggable = _ref3.draggable,
      checkable = _ref3.checkable,
      className = _ref3.className,
      _ref3$showTitle = _ref3.showTitle,
      showTitle = _ref3$showTitle === void 0 ? true : _ref3$showTitle,
      listTitle = _ref3.title;

  var _Container$useContain2 = Container.useContainer(),
      columnsMap = _Container$useContain2.columnsMap,
      setColumnsMap = _Container$useContain2.setColumnsMap,
      sortKeyColumns = _Container$useContain2.sortKeyColumns,
      setSortKeyColumns = _Container$useContain2.setSortKeyColumns;

  var show = list && list.length > 0;
  var treeDataConfig = useMemo(function () {
    if (!show) return {};
    var checkedKeys = [];

    var loopData = function loopData(data, parentConfig) {
      return data.map(function (_ref4) {
        var _config$disable2;

        var key = _ref4.key,
            dataIndex = _ref4.dataIndex,
            children = _ref4.children,
            rest = _objectWithoutProperties(_ref4, _excluded);

        var columnKey = genColumnKey(key, rest.index);
        var config = columnsMap[columnKey || 'null'] || {
          show: true
        };

        if (config.show !== false && (parentConfig === null || parentConfig === void 0 ? void 0 : parentConfig.show) !== false && !children) {
          checkedKeys.push(columnKey);
        }

        var item = _objectSpread(_objectSpread({
          key: columnKey
        }, omit(rest, ['className'])), {}, {
          selectable: false,
          disabled: config.disable === true,
          disableCheckbox: typeof config.disable === 'boolean' ? config.disable : (_config$disable2 = config.disable) === null || _config$disable2 === void 0 ? void 0 : _config$disable2.checkbox,
          isLeaf: parentConfig ? true : undefined
        });

        if (children) {
          item.children = loopData(children, config);
        }

        return item;
      });
    };

    return {
      list: loopData(list),
      keys: checkedKeys
    };
  }, [columnsMap, list, show]);
  /** 移动到指定的位置 */

  var move = useRefFunction(function (id, targetId, dropPosition) {
    var newMap = _objectSpread({}, columnsMap);

    var newColumns = _toConsumableArray(sortKeyColumns);

    var findIndex = newColumns.findIndex(function (columnKey) {
      return columnKey === id;
    });
    var targetIndex = newColumns.findIndex(function (columnKey) {
      return columnKey === targetId;
    });
    var isDownWord = dropPosition > findIndex;

    if (findIndex < 0) {
      return;
    }

    var targetItem = newColumns[findIndex];
    newColumns.splice(findIndex, 1);

    if (dropPosition === 0) {
      newColumns.unshift(targetItem);
    } else {
      newColumns.splice(isDownWord ? targetIndex : targetIndex + 1, 0, targetItem);
    } // 重新生成排序数组


    newColumns.forEach(function (key, order) {
      newMap[key] = _objectSpread(_objectSpread({}, newMap[key] || {}), {}, {
        order: order
      });
    }); // 更新数组

    setColumnsMap(newMap);
    setSortKeyColumns(newColumns);
  });
  /** 选中反选功能 */

  var onCheckTree = useRefFunction(function (e) {
    var columnKey = e.node.key;
    var tempConfig = columnsMap[columnKey] || {};

    var newSetting = _objectSpread({}, tempConfig);

    if (e.checked) {
      delete newSetting.show;
    } else {
      newSetting.show = false;
    }

    var columnKeyMap = _objectSpread(_objectSpread({}, columnsMap), {}, _defineProperty({}, columnKey, omitUndefined(newSetting))); // 如果没有值了，直接干掉他


    if (!omitUndefined(newSetting)) {
      delete columnKeyMap[columnKey];
    }

    setColumnsMap(columnKeyMap);
  });

  if (!show) {
    return null;
  }

  var listDom = /*#__PURE__*/React.createElement(_Tree, {
    itemHeight: 24,
    draggable: draggable && !!((_treeDataConfig$list = treeDataConfig.list) === null || _treeDataConfig$list === void 0 ? void 0 : _treeDataConfig$list.length) && ((_treeDataConfig$list2 = treeDataConfig.list) === null || _treeDataConfig$list2 === void 0 ? void 0 : _treeDataConfig$list2.length) > 1,
    checkable: checkable,
    onDrop: function onDrop(info) {
      var dropKey = info.node.key;
      var dragKey = info.dragNode.key;
      var dropPosition = info.dropPosition,
          dropToGap = info.dropToGap;
      var position = dropPosition === -1 || !dropToGap ? dropPosition + 1 : dropPosition;
      move(dragKey, dropKey, position);
    },
    blockNode: true,
    onCheck: function onCheck(_, e) {
      return onCheckTree(e);
    },
    checkedKeys: treeDataConfig.keys,
    showLine: false,
    titleRender: function titleRender(_node) {
      var node = _objectSpread(_objectSpread({}, _node), {}, {
        children: undefined
      });

      return /*#__PURE__*/React.createElement(CheckboxListItem, _extends({
        className: className
      }, node, {
        columnKey: node.key
      }));
    },
    height: 280,
    treeData: treeDataConfig.list
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, showTitle && /*#__PURE__*/React.createElement("span", {
    className: "".concat(className, "-list-title")
  }, listTitle), listDom);
};

var GroupCheckboxList = function GroupCheckboxList(_ref5) {
  var localColumns = _ref5.localColumns,
      className = _ref5.className,
      draggable = _ref5.draggable,
      checkable = _ref5.checkable;
  var rightList = [];
  var leftList = [];
  var list = [];
  var intl = useIntl();
  localColumns.forEach(function (item) {
    /** 不在 setting 中展示的 */
    if (item.hideInSetting) {
      return;
    }

    var fixed = item.fixed;

    if (fixed === 'left') {
      leftList.push(item);
      return;
    }

    if (fixed === 'right') {
      rightList.push(item);
      return;
    }

    list.push(item);
  });
  var showRight = rightList && rightList.length > 0;
  var showLeft = leftList && leftList.length > 0;
  return /*#__PURE__*/React.createElement("div", {
    className: classNames("".concat(className, "-list"), _defineProperty({}, "".concat(className, "-list-group"), showRight || showLeft))
  }, /*#__PURE__*/React.createElement(CheckboxList, {
    title: intl.getMessage('tableToolBar.leftFixedTitle', '固定在左侧'),
    list: leftList,
    draggable: draggable,
    checkable: checkable,
    className: className
  }), /*#__PURE__*/React.createElement(CheckboxList, {
    list: list,
    draggable: draggable,
    checkable: checkable,
    title: intl.getMessage('tableToolBar.noFixedTitle', '不固定'),
    showTitle: showLeft || showRight,
    className: className
  }), /*#__PURE__*/React.createElement(CheckboxList, {
    title: intl.getMessage('tableToolBar.rightFixedTitle', '固定在右侧'),
    list: rightList,
    draggable: draggable,
    checkable: checkable,
    className: className
  }));
};

function ColumnSetting(props) {
  var _props$checkable, _props$draggable;

  var columnRef = useRef({});
  var counter = Container.useContainer();
  var localColumns = props.columns;
  var _props$checkedReset = props.checkedReset,
      checkedReset = _props$checkedReset === void 0 ? true : _props$checkedReset;
  var columnsMap = counter.columnsMap,
      setColumnsMap = counter.setColumnsMap,
      clearPersistenceStorage = counter.clearPersistenceStorage;
  useEffect(function () {
    if (columnsMap) {
      columnRef.current = JSON.parse(JSON.stringify(columnsMap));
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  /**
   * 设置全部选中，或全部未选中
   *
   * @param show
   */

  var setAllSelectAction = useRefFunction(function () {
    var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var columnKeyMap = {};

    var loopColumns = function loopColumns(columns) {
      columns.forEach(function (_ref6) {
        var key = _ref6.key,
            fixed = _ref6.fixed,
            index = _ref6.index,
            children = _ref6.children;
        var columnKey = genColumnKey(key, index);

        if (columnKey) {
          columnKeyMap[columnKey] = {
            show: show,
            fixed: fixed
          };
        }

        if (children) {
          loopColumns(children);
        }
      });
    };

    loopColumns(localColumns);
    setColumnsMap(columnKeyMap);
  });
  /** 全选和反选 */

  var checkedAll = useRefFunction(function (e) {
    if (e.target.checked) {
      setAllSelectAction();
    } else {
      setAllSelectAction(false);
    }
  });
  /** 重置项目 */

  var clearClick = useRefFunction(function () {
    setColumnsMap(columnRef.current);
    clearPersistenceStorage === null || clearPersistenceStorage === void 0 ? void 0 : clearPersistenceStorage();
  }); // 未选中的 key 列表

  var unCheckedKeys = Object.values(columnsMap).filter(function (value) {
    return !value || value.show === false;
  }); // 是否已经选中

  var indeterminate = unCheckedKeys.length > 0 && unCheckedKeys.length !== localColumns.length;
  var intl = useIntl();

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var className = getPrefixCls('pro-table-column-setting');
  return /*#__PURE__*/React.createElement(_Popover, {
    arrowPointAtCenter: true,
    title: /*#__PURE__*/React.createElement("div", {
      className: "".concat(className, "-title")
    }, /*#__PURE__*/React.createElement(_Checkbox, {
      indeterminate: indeterminate,
      checked: unCheckedKeys.length === 0 && unCheckedKeys.length !== localColumns.length,
      onChange: function onChange(e) {
        return checkedAll(e);
      }
    }, intl.getMessage('tableToolBar.columnDisplay', '列展示')), checkedReset ? /*#__PURE__*/React.createElement("a", {
      onClick: clearClick,
      className: "".concat(className, "-action-rest-button")
    }, intl.getMessage('tableToolBar.reset', '重置')) : null, (props === null || props === void 0 ? void 0 : props.extra) ? /*#__PURE__*/React.createElement(_Space, {
      size: 12,
      align: "center"
    }, props.extra) : null),
    overlayClassName: "".concat(className, "-overlay"),
    trigger: "click",
    placement: "bottomRight",
    content: /*#__PURE__*/React.createElement(GroupCheckboxList, {
      checkable: (_props$checkable = props.checkable) !== null && _props$checkable !== void 0 ? _props$checkable : true,
      draggable: (_props$draggable = props.draggable) !== null && _props$draggable !== void 0 ? _props$draggable : true,
      className: className,
      localColumns: localColumns
    })
  }, /*#__PURE__*/React.createElement(_Tooltip, {
    title: intl.getMessage('tableToolBar.columnSetting', '列设置')
  }, /*#__PURE__*/React.createElement(SettingOutlined, null)));
}

export default ColumnSetting;