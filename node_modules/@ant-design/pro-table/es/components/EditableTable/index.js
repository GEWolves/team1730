import "antd/es/form/style";
import _Form from "antd/es/form";
import "antd/es/button/style";
import _Button from "antd/es/button";
import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
var _excluded = ["onTableChange", "maxLength", "formItemProps", "recordCreatorProps", "rowKey", "controlled", "defaultValue"],
    _excluded2 = ["record", "position", "creatorButtonText", "newRecordType", "parentKey"];
import React, { useContext, useEffect, useImperativeHandle, useMemo, useRef } from 'react';
import useMergedState from "rc-util/es/hooks/useMergedState";
import { PlusOutlined } from '@ant-design/icons';
import { runFunction, useRefFunction } from '@ant-design/pro-utils';
import { Field } from 'rc-field-form';
import ProTable from '../../Table';
var EditableTableActionContext = /*#__PURE__*/React.createContext(undefined);
/** 可编辑表格的按钮 */

function RecordCreator(props) {
  var children = props.children,
      record = props.record,
      position = props.position,
      newRecordType = props.newRecordType,
      parentKey = props.parentKey;
  var actionRef = useContext(EditableTableActionContext);
  return /*#__PURE__*/React.cloneElement(children, _objectSpread(_objectSpread({}, children.props), {}, {
    onClick: function () {
      var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {
        var _children$props$onCli, _children$props, _actionRef$current;

        var isOk;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (_children$props$onCli = (_children$props = children.props).onClick) === null || _children$props$onCli === void 0 ? void 0 : _children$props$onCli.call(_children$props, e);

              case 2:
                isOk = _context.sent;

                if (!(isOk === false)) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return");

              case 5:
                actionRef === null || actionRef === void 0 ? void 0 : (_actionRef$current = actionRef.current) === null || _actionRef$current === void 0 ? void 0 : _actionRef$current.addEditRecord(record, {
                  position: position,
                  newRecordType: newRecordType,
                  parentKey: parentKey
                });

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function onClick(_x) {
        return _onClick.apply(this, arguments);
      }

      return onClick;
    }()
  }));
}
/**
 * 可以直接放到 Form 中的可编辑表格
 *
 * @param props
 */


function EditableTable(props) {
  var _props$editable2;

  var onTableChange = props.onTableChange,
      maxLength = props.maxLength,
      formItemProps = props.formItemProps,
      recordCreatorProps = props.recordCreatorProps,
      rowKey = props.rowKey,
      controlled = props.controlled,
      defaultValue = props.defaultValue,
      rest = _objectWithoutProperties(props, _excluded);

  var actionRef = useRef();
  var formRef = useRef(); // 设置 ref

  useImperativeHandle(rest.actionRef, function () {
    return actionRef.current;
  });

  var _useMergedState = useMergedState(function () {
    return props.value || defaultValue || [];
  }, {
    value: props.value,
    onChange: props.onChange
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      value = _useMergedState2[0],
      setValue = _useMergedState2[1];

  var getRowKey = React.useMemo(function () {
    if (typeof rowKey === 'function' && rowKey) {
      return rowKey;
    }

    return function (record, index) {
      return record[rowKey] || index;
    };
  }, [rowKey]);
  useEffect(function () {
    if (!props.controlled) return;
    value.forEach(function (current, index) {
      var _formRef$current;

      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setFieldsValue(_defineProperty({}, getRowKey(current, index), current));
    }, {}); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value, props.controlled]);

  var _ref = recordCreatorProps || {},
      record = _ref.record,
      position = _ref.position,
      creatorButtonText = _ref.creatorButtonText,
      newRecordType = _ref.newRecordType,
      parentKey = _ref.parentKey,
      restButtonProps = _objectWithoutProperties(_ref, _excluded2);

  var isTop = position === 'top';
  var creatorButtonDom = useMemo(function () {
    if (maxLength && maxLength <= (value === null || value === void 0 ? void 0 : value.length)) {
      return false;
    }

    return recordCreatorProps !== false && /*#__PURE__*/React.createElement(RecordCreator, {
      record: runFunction(record, value === null || value === void 0 ? void 0 : value.length, value) || {},
      position: position,
      parentKey: runFunction(parentKey, value === null || value === void 0 ? void 0 : value.length, value),
      newRecordType: newRecordType
    }, /*#__PURE__*/React.createElement(_Button, _extends({
      type: "dashed",
      style: {
        display: 'block',
        margin: '10px 0',
        width: '100%'
      },
      icon: /*#__PURE__*/React.createElement(PlusOutlined, null)
    }, restButtonProps), creatorButtonText || '添加一行数据')); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [recordCreatorProps, maxLength, value === null || value === void 0 ? void 0 : value.length]);
  var buttonRenderProps = useMemo(function () {
    if (!creatorButtonDom) {
      return {};
    }

    if (isTop) {
      return {
        components: {
          header: {
            wrapper: function wrapper(_ref2) {
              var _rest$columns;

              var className = _ref2.className,
                  children = _ref2.children;
              return /*#__PURE__*/React.createElement("thead", {
                className: className
              }, children, /*#__PURE__*/React.createElement("tr", {
                style: {
                  position: 'relative'
                }
              }, /*#__PURE__*/React.createElement("td", {
                colSpan: 0,
                style: {
                  visibility: 'hidden'
                }
              }, creatorButtonDom), /*#__PURE__*/React.createElement("td", {
                style: {
                  position: 'absolute',
                  left: 0,
                  width: '100%'
                },
                colSpan: (_rest$columns = rest.columns) === null || _rest$columns === void 0 ? void 0 : _rest$columns.length
              }, creatorButtonDom)));
            }
          }
        }
      };
    }

    return {
      tableViewRender: function tableViewRender(_, dom) {
        var _props$tableViewRende, _props$tableViewRende2;

        return /*#__PURE__*/React.createElement(React.Fragment, null, (_props$tableViewRende = (_props$tableViewRende2 = props.tableViewRender) === null || _props$tableViewRende2 === void 0 ? void 0 : _props$tableViewRende2.call(props, _, dom)) !== null && _props$tableViewRende !== void 0 ? _props$tableViewRende : dom, creatorButtonDom);
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isTop, creatorButtonDom]);

  var editableProps = _objectSpread({}, props.editable);
  /**
   * 防止闭包的onchange
   *
   * >>>>>>为了性能好辛苦
   */


  var newOnValueChange = useRefFunction(function (r, dataSource) {
    var _props$editable, _props$editable$onVal, _props$onValuesChange;

    (_props$editable = props.editable) === null || _props$editable === void 0 ? void 0 : (_props$editable$onVal = _props$editable.onValuesChange) === null || _props$editable$onVal === void 0 ? void 0 : _props$editable$onVal.call(_props$editable, r, dataSource);
    (_props$onValuesChange = props.onValuesChange) === null || _props$onValuesChange === void 0 ? void 0 : _props$onValuesChange.call(props, dataSource, r);

    if (props.controlled) {
      var _props$onChange;

      props === null || props === void 0 ? void 0 : (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, dataSource);
    }
  });

  if ((props === null || props === void 0 ? void 0 : props.onValuesChange) || ((_props$editable2 = props.editable) === null || _props$editable2 === void 0 ? void 0 : _props$editable2.onValuesChange) || // 受控模式需要触发 onchange
  props.controlled && (props === null || props === void 0 ? void 0 : props.onChange)) {
    editableProps.onValuesChange = newOnValueChange;
  }

  return /*#__PURE__*/React.createElement(EditableTableActionContext.Provider, {
    value: actionRef
  }, /*#__PURE__*/React.createElement(ProTable, _extends({
    search: false,
    options: false,
    pagination: false,
    rowKey: rowKey,
    revalidateOnFocus: false
  }, rest, buttonRenderProps, {
    tableLayout: "fixed",
    actionRef: actionRef,
    onChange: onTableChange,
    dataSource: value,
    editable: _objectSpread(_objectSpread({}, editableProps), {}, {
      formProps: {
        formRef: formRef
      }
    }),
    onDataSourceChange: function onDataSourceChange(dataSource) {
      setValue(dataSource);
    }
  })));
}

function FieldEditableTable(props) {
  var name = props.name,
      formItemProps = props.formItemProps;
  if (!name) return /*#__PURE__*/React.createElement(EditableTable, props);
  return /*#__PURE__*/React.createElement(_Form.Item, _extends({
    style: {
      maxWidth: '100%'
    }
  }, formItemProps, {
    name: props.name
  }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Field, {
    shouldUpdate: true,
    name: props.name,
    isList: true
  }, function (control) {
    return /*#__PURE__*/React.createElement(EditableTable, _extends({}, props, {
      value: control.value,
      onChange: control.onChange
    }));
  })));
}

FieldEditableTable.RecordCreator = RecordCreator;
export default FieldEditableTable;