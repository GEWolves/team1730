import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["valueType", "customLightMode", "lightFilterLabelFormatter", "valuePropName", "ignoreWidth", "defaultProps"],
    _excluded2 = ["label", "tooltip", "placeholder", "width", "proFieldProps", "bordered", "messageVariables", "ignoreFormItem", "transform", "readonly", "allowClear", "colSize", "formItemProps", "filedConfig", "cacheForSwr"];
import React, { useMemo, useContext } from 'react';
import { pickProFormItemProps, omitUndefined, usePrevious, isDeepEqualReact } from '@ant-design/pro-utils';
import classnames from 'classnames';
import { noteOnce } from "rc-util/es/warning";
import { stringify } from 'use-json-comparison';
import FieldContext from '../FieldContext';
import ProFormItem from '../components/FormItem';
import { FieldContext as RcFieldContext } from 'rc-field-form';
export var TYPE = Symbol('ProFormComponent');
var WIDTH_SIZE_ENUM = {
  // 适用于短数字，短文本或者选项
  xs: 104,
  s: 216,
  // 适用于较短字段录入、如姓名、电话、ID 等。
  sm: 216,
  m: 328,
  // 标准宽度，适用于大部分字段长度。
  md: 328,
  l: 440,
  // 适用于较长字段录入，如长网址、标签组、文件路径等。
  lg: 440,
  // 适用于长文本录入，如长链接、描述、备注等，通常搭配自适应多行输入框或定高文本域使用。
  xl: 552
};
/**
 * 这个方法的主要作用的帮助 Field 增加 FormItem 同时也会处理 lightFilter
 *
 * @param Field
 * @param config
 */

function createField(Field, config) {
  // 标记是否是 ProForm 的组件
  // @ts-ignore
  // eslint-disable-next-line no-param-reassign
  Field.displayName = 'ProFormComponent';

  var FieldWithContext = function FieldWithContext(props) {
    var _otherProps$name, _rest$fieldProps2, _field$props$allowCle, _field$props, _field$props2;

    var _ref = _objectSpread(_objectSpread({}, props === null || props === void 0 ? void 0 : props.filedConfig), config) || {},
        valueType = _ref.valueType,
        customLightMode = _ref.customLightMode,
        lightFilterLabelFormatter = _ref.lightFilterLabelFormatter,
        _ref$valuePropName = _ref.valuePropName,
        valuePropName = _ref$valuePropName === void 0 ? 'value' : _ref$valuePropName,
        ignoreWidth = _ref.ignoreWidth,
        defaultProps = _ref.defaultProps,
        defaultFormItemProps = _objectWithoutProperties(_ref, _excluded);

    var _defaultProps$props = _objectSpread(_objectSpread({}, defaultProps), props),
        label = _defaultProps$props.label,
        tooltip = _defaultProps$props.tooltip,
        placeholder = _defaultProps$props.placeholder,
        width = _defaultProps$props.width,
        proFieldProps = _defaultProps$props.proFieldProps,
        bordered = _defaultProps$props.bordered,
        messageVariables = _defaultProps$props.messageVariables,
        ignoreFormItem = _defaultProps$props.ignoreFormItem,
        transform = _defaultProps$props.transform,
        readonly = _defaultProps$props.readonly,
        allowClear = _defaultProps$props.allowClear,
        colSize = _defaultProps$props.colSize,
        propsFormItemProps = _defaultProps$props.formItemProps,
        filedConfig = _defaultProps$props.filedConfig,
        cacheForSwr = _defaultProps$props.cacheForSwr,
        rest = _objectWithoutProperties(_defaultProps$props, _excluded2);
    /** 从 context 中拿到的值 */


    var _React$useContext = React.useContext(FieldContext),
        fieldProps = _React$useContext.fieldProps,
        formItemProps = _React$useContext.formItemProps; // restFormItemProps is user props pass to Form.Item


    var restFormItemProps = pickProFormItemProps(rest);
    var formNeedProps = useMemo(function () {
      return omitUndefined({
        value: rest.value
      }); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [rest.value]);
    var realFormItem = useMemo(function () {
      if (!ignoreFormItem) {
        return {};
      }

      return omitUndefined(formNeedProps);
    }, [formNeedProps, ignoreFormItem]);
    var realFieldProps = useMemo(function () {
      var _rest$fieldProps;

      return omitUndefined(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, realFormItem), {}, {
        disabled: props.disabled,
        placeholder: placeholder
      }, fieldProps || {}), rest.fieldProps || {}), {}, {
        style: omitUndefined(_objectSpread(_objectSpread({}, (_rest$fieldProps = rest.fieldProps) === null || _rest$fieldProps === void 0 ? void 0 : _rest$fieldProps.style), fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.style))
      }));
    }, [fieldProps, placeholder, props.disabled, realFormItem, rest.fieldProps]);

    var otherProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      messageVariables: messageVariables
    }, defaultFormItemProps), formItemProps), restFormItemProps), propsFormItemProps);

    noteOnce( // eslint-disable-next-line @typescript-eslint/dot-notation
    !rest['defaultValue'], '请不要在 Form 中使用 defaultXXX。如果需要默认值请使用 initialValues 和 initialValue。');
    var ignoreWidthValueType = useMemo(function () {
      return ['switch', 'radioButton', 'radio', 'rate'];
    }, []);

    var _useContext = useContext(RcFieldContext),
        prefixName = _useContext.prefixName;

    var proFieldKey = useMemo(function () {
      /** 如果没有cacheForSwr，默认关掉缓存 只有table中默认打开，form中打开问题还挺多的，有些场景name 会相同 */
      if (!cacheForSwr) return undefined;
      var name = otherProps === null || otherProps === void 0 ? void 0 : otherProps.name;
      if (Array.isArray(name)) name = name.join('_');
      if (Array.isArray(prefixName) && name) name = "".concat(prefixName.join('.'), ".").concat(name);
      return name && "form-field-".concat(name); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [stringify(otherProps === null || otherProps === void 0 ? void 0 : otherProps.name), prefixName]);
    var realFieldPropsStyle = useMemo(function () {
      return _objectSpread({}, realFieldProps === null || realFieldProps === void 0 ? void 0 : realFieldProps.style);
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    [stringify(realFieldProps === null || realFieldProps === void 0 ? void 0 : realFieldProps.style)]);

    if (realFieldPropsStyle.width !== undefined && rest.valueType === 'switch') {
      delete realFieldPropsStyle.width;
    } // eslint-disable-next-line react-hooks/exhaustive-deps


    var propsValueType = useMemo(function () {
      return rest.valueType;
    }, [rest.valueType]);
    var prefRest = usePrevious(rest);
    var field = useMemo(function () {
      return /*#__PURE__*/React.createElement(Field // ProXxx 上面的 props 透传给 FieldProps，可能包含 Field 自定义的 props，
      // 比如 ProFormSelect 的 request
      , _extends({}, rest, {
        fieldProps: omitUndefined(_objectSpread(_objectSpread({
          allowClear: allowClear
        }, realFieldProps), {}, {
          style: omitUndefined(_objectSpread({
            width: width && !WIDTH_SIZE_ENUM[width] ? width : undefined
          }, realFieldPropsStyle)),
          className: classnames(realFieldProps === null || realFieldProps === void 0 ? void 0 : realFieldProps.className, _defineProperty({
            'pro-field': width && WIDTH_SIZE_ENUM[width]
          }, "pro-field-".concat(width), width && // 有些 valueType 不需要宽度
          !ignoreWidthValueType.includes(propsValueType) && !ignoreWidth && WIDTH_SIZE_ENUM[width])) || undefined
        })),
        proFieldProps: omitUndefined(_objectSpread({
          // @ts-ignore
          mode: rest === null || rest === void 0 ? void 0 : rest.mode,
          readonly: readonly,
          params: rest.params,
          proFieldKey: proFieldKey
        }, proFieldProps))
      })); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [allowClear, ignoreWidth, ignoreWidthValueType, proFieldKey, // eslint-disable-next-line react-hooks/exhaustive-deps
    stringify(proFieldProps), propsValueType, readonly, realFieldProps, realFieldPropsStyle, // eslint-disable-next-line react-hooks/exhaustive-deps
    isDeepEqualReact(prefRest, rest, ['onChange', 'onBlur', 'onFocus', 'record']) ? undefined : {}, width]);
    return /*#__PURE__*/React.createElement(ProFormItem // 全局的提供一个 tip 功能，可以减少代码量
    // 轻量模式下不通过 FormItem 显示 label
    , _extends({
      label: label && (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light) !== true ? label : undefined,
      tooltip: (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light) !== true && tooltip,
      valuePropName: valuePropName,
      key: (_otherProps$name = otherProps.name) === null || _otherProps$name === void 0 ? void 0 : _otherProps$name.toString()
    }, otherProps, {
      ignoreFormItem: ignoreFormItem,
      transform: transform,
      dataFormat: (_rest$fieldProps2 = rest.fieldProps) === null || _rest$fieldProps2 === void 0 ? void 0 : _rest$fieldProps2.format,
      valueType: valueType || rest.valueType,
      messageVariables: _objectSpread({
        label: label || ''
      }, otherProps === null || otherProps === void 0 ? void 0 : otherProps.messageVariables),
      lightProps: omitUndefined(_objectSpread(_objectSpread(_objectSpread({}, realFieldProps), {}, {
        valueType: valueType || rest.valueType,
        bordered: bordered,
        allowClear: (_field$props$allowCle = field === null || field === void 0 ? void 0 : (_field$props = field.props) === null || _field$props === void 0 ? void 0 : _field$props.allowClear) !== null && _field$props$allowCle !== void 0 ? _field$props$allowCle : allowClear,
        light: proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.light,
        label: label,
        customLightMode: customLightMode,
        labelFormatter: lightFilterLabelFormatter,
        valuePropName: valuePropName,
        footerRender: field === null || field === void 0 ? void 0 : (_field$props2 = field.props) === null || _field$props2 === void 0 ? void 0 : _field$props2.footerRender
      }, rest.lightProps), otherProps.lightProps))
    }), field);
  }; // 标记是否是 proform 的组件
  // @ts-ignore
  // eslint-disable-next-line no-param-reassign


  FieldWithContext.displayName = 'ProFormComponent';
  return FieldWithContext;
}

export default createField;