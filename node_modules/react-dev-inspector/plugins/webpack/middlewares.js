"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLaunchEditorMiddleware = exports.launchEditorMiddleware = exports.queryParserMiddleware = void 0;
const path_1 = __importDefault(require("path"));
const errorOverlayMiddleware_1 = __importDefault(require("react-dev-utils/errorOverlayMiddleware"));
const launchEditorEndpoint_1 = __importDefault(require("react-dev-utils/launchEditorEndpoint"));
const reactLaunchEditorMiddleware = (0, errorOverlayMiddleware_1.default)();
const queryParserMiddleware = (req, res, next) => {
    if (!req.query && req.url) {
        const url = new URL(req.url, 'https://placeholder.domain');
        req.query = Object.fromEntries(url.searchParams.entries());
    }
    next();
};
exports.queryParserMiddleware = queryParserMiddleware;
const launchEditorMiddleware = (req, res, next) => {
    if (req.url.startsWith(launchEditorEndpoint_1.default)) {
        /**
         * retain origin endpoint for backward compatibility <= v1.2.0
         */
        if (
        // relative route used in `Inspector.tsx` `gotoEditor()`
        req.url.startsWith(`${launchEditorEndpoint_1.default}/relative`)
            && typeof req.query.fileName === 'string') {
            req.query.fileName = path_1.default.join(process.cwd(), req.query.fileName);
        }
        reactLaunchEditorMiddleware(req, res, next);
    }
    else {
        next();
    }
};
exports.launchEditorMiddleware = launchEditorMiddleware;
/**
 * retain create method for backward compatibility <= v1.2.0
 */
const createLaunchEditorMiddleware = () => exports.launchEditorMiddleware;
exports.createLaunchEditorMiddleware = createLaunchEditorMiddleware;
