import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import "antd/es/card/style";
import _Card from "antd/es/card";
import "antd/es/spin/style";
import _Spin from "antd/es/spin";
import "antd/es/table/style";
import _Table from "antd/es/table";
import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["rowKey", "tableClassName", "action", "tableColumn", "type", "pagination", "rowSelection", "size", "defaultSize", "tableStyle", "toolbarDom", "searchNode", "style", "cardProps", "alertDom", "name", "onSortChange", "onFilterChange", "options", "isLightFilter", "className", "cardBordered", "editableUtils", "rootRef"],
    _excluded2 = ["cardBordered", "request", "className", "params", "defaultData", "headerTitle", "postData", "pagination", "actionRef", "columns", "toolBarRender", "onLoad", "onRequestError", "style", "cardProps", "tableStyle", "tableClassName", "columnsStateMap", "onColumnsStateChange", "options", "search", "name", "onLoadingChange", "rowSelection", "beforeSearchSubmit", "tableAlertRender", "defaultClassName", "formRef", "type", "columnEmptyText", "toolbar", "rowKey", "manualRequest", "polling", "tooltip"];

/* eslint max-classes-per-file: ["error", 3] */
import React, { useContext, useRef, useCallback, useMemo, useEffect, useImperativeHandle } from 'react';
import { useIntl, ConfigProviderWrap } from '@ant-design/pro-provider';
import classNames from 'classnames';
import { stringify } from 'use-json-comparison';
import { useDeepCompareEffect, omitUndefined, useMountMergeState, useEditableArray, ErrorBoundary, useDeepCompareEffectDebounce } from '@ant-design/pro-utils';
import useFetchData from './useFetchData';
import Container from './container';
import Toolbar from './components/ToolBar';
import Alert from './components/Alert';
import FormRender from './components/Form';
import { genColumnKey, mergePagination, useActionType, isBordered, parseDefaultColumnConfig } from './utils';
import { genProColumnToColumn } from './utils/genProColumnToColumn';
import './index.less';
import { columnSort } from './utils/columnSort';
import ProForm from '@ant-design/pro-form';

function TableRender(props) {
  var rowKey = props.rowKey,
      tableClassName = props.tableClassName,
      action = props.action,
      tableColumns = props.tableColumn,
      type = props.type,
      pagination = props.pagination,
      rowSelection = props.rowSelection,
      size = props.size,
      defaultSize = props.defaultSize,
      tableStyle = props.tableStyle,
      toolbarDom = props.toolbarDom,
      searchNode = props.searchNode,
      style = props.style,
      cardProps = props.cardProps,
      alertDom = props.alertDom,
      name = props.name,
      onSortChange = props.onSortChange,
      onFilterChange = props.onFilterChange,
      options = props.options,
      isLightFilter = props.isLightFilter,
      className = props.className,
      cardBordered = props.cardBordered,
      editableUtils = props.editableUtils,
      rootRef = props.rootRef,
      rest = _objectWithoutProperties(props, _excluded);

  var counter = Container.useContainer();
  /** 需要遍历一下，不然不支持嵌套表格 */

  var columns = useMemo(function () {
    var loopFilter = function loopFilter(column) {
      return column.map(function (item) {
        // 删掉不应该显示的
        var columnKey = genColumnKey(item.key, item.index);
        var config = counter.columnsMap[columnKey];

        if (config && config.show === false) {
          return false;
        }

        if (item.children) {
          return _objectSpread(_objectSpread({}, item), {}, {
            children: loopFilter(item.children)
          });
        }

        return item;
      }).filter(Boolean);
    };

    return loopFilter(tableColumns);
  }, [counter.columnsMap, tableColumns]);
  /** 如果所有列中的 filters=true| undefined 说明是用的是本地筛选 任何一列配置 filters=false，就能绕过这个判断 */

  var useLocaleFilter = useMemo(function () {
    return columns === null || columns === void 0 ? void 0 : columns.every(function (column) {
      return column.filters === true && column.onFilter === true || column.filters === undefined && column.onFilter === undefined;
    });
  }, [columns]);
  /**
   * 如果是分页的新增，总是加到最后一行
   *
   * @returns
   */

  var editableDataSource = function editableDataSource() {
    var _ref = editableUtils.newLineRecord || {},
        newLineOptions = _ref.options,
        row = _ref.defaultValue;

    if ((newLineOptions === null || newLineOptions === void 0 ? void 0 : newLineOptions.position) === 'top') {
      return [row].concat(_toConsumableArray(action.dataSource));
    } // 如果有分页的功能，我们加到这一页的末尾


    if (pagination && (pagination === null || pagination === void 0 ? void 0 : pagination.current) && (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize)) {
      var newDataSource = _toConsumableArray(action.dataSource);

      if ((pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) > newDataSource.length) {
        newDataSource.push(row);
        return newDataSource;
      }

      newDataSource.splice((pagination === null || pagination === void 0 ? void 0 : pagination.current) * (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) - 1, 0, row);
      return newDataSource;
    }

    return [].concat(_toConsumableArray(action.dataSource), [row]);
  };

  var getTableProps = function getTableProps() {
    return _objectSpread(_objectSpread({}, rest), {}, {
      size: size,
      rowSelection: rowSelection === false ? undefined : rowSelection,
      className: tableClassName,
      style: tableStyle,
      columns: columns,
      loading: action.loading,
      dataSource: editableUtils.newLineRecord ? editableDataSource() : action.dataSource,
      pagination: pagination,
      onChange: function onChange(changePagination, filters, sorter, extra) {
        var _rest$onChange;

        (_rest$onChange = rest.onChange) === null || _rest$onChange === void 0 ? void 0 : _rest$onChange.call(rest, changePagination, filters, sorter, extra);

        if (!useLocaleFilter) {
          onFilterChange(omitUndefined(filters));
        } // 制造筛选的数据
        // 制造一个排序的数据


        if (Array.isArray(sorter)) {
          var data = sorter.reduce(function (pre, value) {
            return _objectSpread(_objectSpread({}, pre), {}, _defineProperty({}, "".concat(value.field), value.order));
          }, {});
          onSortChange(omitUndefined(data));
        } else {
          var _sorter$column;

          var sorterOfColumn = (_sorter$column = sorter.column) === null || _sorter$column === void 0 ? void 0 : _sorter$column.sorter;
          var isSortByField = (sorterOfColumn === null || sorterOfColumn === void 0 ? void 0 : sorterOfColumn.toString()) === sorterOfColumn;
          onSortChange(omitUndefined(_defineProperty({}, "".concat(isSortByField ? sorterOfColumn : sorter.field), sorter.order)) || {});
        }
      }
    });
  };
  /** 默认的 table dom，如果是编辑模式，外面还要包个 form */


  var baseTableDom = /*#__PURE__*/React.createElement(_Table, _extends({}, getTableProps(), {
    rowKey: rowKey
  }));
  /** 自定义的 render */

  var tableDom = props.tableViewRender ? props.tableViewRender(_objectSpread(_objectSpread({}, getTableProps()), {}, {
    rowSelection: rowSelection !== false ? rowSelection : undefined
  }), baseTableDom) : baseTableDom;
  var tableContentDom = useMemo(function () {
    if (props.editable) {
      var _props$editable, _props$editable2;

      return /*#__PURE__*/React.createElement(React.Fragment, null, toolbarDom, alertDom, /*#__PURE__*/React.createElement(ProForm, _extends({
        onInit: function onInit(_, form) {
          counter.setEditorTableForm(form);
        } // @ts-ignore
        ,
        formRef: function formRef(form) {
          counter.setEditorTableForm(form);
        }
      }, (_props$editable = props.editable) === null || _props$editable === void 0 ? void 0 : _props$editable.formProps, {
        component: false,
        form: (_props$editable2 = props.editable) === null || _props$editable2 === void 0 ? void 0 : _props$editable2.form,
        onValuesChange: editableUtils.onValuesChange,
        key: "table",
        submitter: false,
        omitNil: false,
        contentRender: function contentRender(items) {
          if (counter.editableForm) return items;
          return /*#__PURE__*/React.createElement("div", {
            style: {
              paddingTop: 100,
              textAlign: 'center'
            }
          }, /*#__PURE__*/React.createElement(_Spin, {
            size: "large"
          }));
        }
      }), tableDom));
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, toolbarDom, alertDom, tableDom); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [alertDom, !!props.editable, tableDom, toolbarDom]);
  /** Table 区域的 dom，为了方便 render */

  var tableAreaDom = // cardProps 或者 有了name 就不需要这个padding了，不然会导致不好对其
  cardProps === false || !!props.name ? tableContentDom : /*#__PURE__*/React.createElement(_Card, _extends({
    bordered: isBordered('table', cardBordered),
    bodyStyle: toolbarDom ? {
      paddingTop: 0
    } : {
      padding: 0
    }
  }, cardProps), tableContentDom);

  var renderTable = function renderTable() {
    if (props.tableRender) {
      return props.tableRender(props, tableAreaDom, {
        toolbar: toolbarDom || undefined,
        alert: alertDom || undefined,
        table: tableDom || undefined
      });
    }

    return tableAreaDom;
  };

  var proTableDom = /*#__PURE__*/React.createElement("div", {
    className: classNames(className, _defineProperty({}, "".concat(className, "-polling"), action.pollingLoading)),
    style: style,
    ref: rootRef
  }, isLightFilter ? null : searchNode, type !== 'form' && props.tableExtraRender && action.dataSource && /*#__PURE__*/React.createElement("div", {
    className: "".concat(className, "-extra")
  }, props.tableExtraRender(props, action.dataSource)), type !== 'form' && renderTable()); // 如果不需要的全屏，ConfigProvider 没有意义

  if (!options || !(options === null || options === void 0 ? void 0 : options.fullScreen)) {
    return proTableDom;
  }

  return /*#__PURE__*/React.createElement(_ConfigProvider, {
    getPopupContainer: function getPopupContainer() {
      return rootRef.current || document.body;
    }
  }, proTableDom);
}

var emptyObj = {};

var ProTable = function ProTable(props) {
  var _props$revalidateOnFo, _props$expandable;

  var cardBordered = props.cardBordered,
      request = props.request,
      propsClassName = props.className,
      _props$params = props.params,
      params = _props$params === void 0 ? emptyObj : _props$params,
      defaultData = props.defaultData,
      headerTitle = props.headerTitle,
      postData = props.postData,
      propsPagination = props.pagination,
      propsActionRef = props.actionRef,
      _props$columns = props.columns,
      propsColumns = _props$columns === void 0 ? [] : _props$columns,
      toolBarRender = props.toolBarRender,
      onLoad = props.onLoad,
      onRequestError = props.onRequestError,
      style = props.style,
      cardProps = props.cardProps,
      tableStyle = props.tableStyle,
      tableClassName = props.tableClassName,
      columnsStateMap = props.columnsStateMap,
      onColumnsStateChange = props.onColumnsStateChange,
      options = props.options,
      search = props.search,
      isEditorTable = props.name,
      onLoadingChange = props.onLoadingChange,
      _props$rowSelection = props.rowSelection,
      propsRowSelection = _props$rowSelection === void 0 ? false : _props$rowSelection,
      beforeSearchSubmit = props.beforeSearchSubmit,
      tableAlertRender = props.tableAlertRender,
      defaultClassName = props.defaultClassName,
      propRef = props.formRef,
      _props$type = props.type,
      type = _props$type === void 0 ? 'table' : _props$type,
      _props$columnEmptyTex = props.columnEmptyText,
      columnEmptyText = _props$columnEmptyTex === void 0 ? '-' : _props$columnEmptyTex,
      toolbar = props.toolbar,
      rowKey = props.rowKey,
      manualRequest = props.manualRequest,
      polling = props.polling,
      tooltip = props.tooltip,
      rest = _objectWithoutProperties(props, _excluded2);

  var className = classNames(defaultClassName, propsClassName);
  /** 通用的来操作子节点的工具类 */

  var actionRef = useRef();
  var defaultFormRef = useRef();
  var formRef = propRef || defaultFormRef;
  useImperativeHandle(propsActionRef, function () {
    return actionRef.current;
  });
  /** 单选多选的相关逻辑 */

  var _useMountMergeState = useMountMergeState(propsRowSelection ? propsRowSelection === null || propsRowSelection === void 0 ? void 0 : propsRowSelection.defaultSelectedRowKeys : undefined, {
    value: propsRowSelection ? propsRowSelection.selectedRowKeys : undefined
  }),
      _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),
      selectedRowKeys = _useMountMergeState2[0],
      setSelectedRowKeys = _useMountMergeState2[1];

  var selectedRowsRef = useRef([]);
  var setSelectedRowsAndKey = useCallback(function (keys, rows) {
    setSelectedRowKeys(keys);

    if (!propsRowSelection || !(propsRowSelection === null || propsRowSelection === void 0 ? void 0 : propsRowSelection.selectedRowKeys)) {
      selectedRowsRef.current = rows;
    }
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [setSelectedRowKeys]);

  var _useMountMergeState3 = useMountMergeState(function () {
    // 如果手动模式，或者 search 不存在的时候设置为 undefined
    // undefined 就不会触发首次加载
    if (manualRequest || search !== false) {
      return undefined;
    }

    return {};
  }),
      _useMountMergeState4 = _slicedToArray(_useMountMergeState3, 2),
      formSearch = _useMountMergeState4[0],
      setFormSearch = _useMountMergeState4[1];

  var _useMountMergeState5 = useMountMergeState({}),
      _useMountMergeState6 = _slicedToArray(_useMountMergeState5, 2),
      proFilter = _useMountMergeState6[0],
      setProFilter = _useMountMergeState6[1];

  var _useMountMergeState7 = useMountMergeState({}),
      _useMountMergeState8 = _slicedToArray(_useMountMergeState7, 2),
      proSort = _useMountMergeState8[0],
      setProSort = _useMountMergeState8[1];
  /** 设置默认排序和筛选值 */


  useEffect(function () {
    var _parseDefaultColumnCo = parseDefaultColumnConfig(propsColumns),
        sort = _parseDefaultColumnCo.sort,
        filter = _parseDefaultColumnCo.filter;

    setProFilter(filter);
    setProSort(sort); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  /** 获取 table 的 dom ref */

  var rootRef = useRef(null);
  var intl = useIntl();
  /** 需要初始化 不然默认可能报错 这里取了 defaultCurrent 和 current 为了保证不会重复刷新 */

  var fetchPagination = _typeof(propsPagination) === 'object' ? propsPagination : {
    defaultCurrent: 1,
    defaultPageSize: 20,
    pageSize: 20,
    current: 1
  }; // ============================ useFetchData ============================

  var fetchData = useMemo(function () {
    if (!request) return undefined;
    return /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pageParams) {
        var actionParams, response;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                actionParams = _objectSpread(_objectSpread(_objectSpread({}, pageParams || {}), formSearch), params); // eslint-disable-next-line no-underscore-dangle

                delete actionParams._timestamp;
                _context.next = 4;
                return request(actionParams, proSort, proFilter);

              case 4:
                response = _context.sent;
                return _context.abrupt("return", response);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  }, [formSearch, params, proFilter, proSort, request]);
  var action = useFetchData(fetchData, defaultData, {
    pageInfo: propsPagination === false ? false : fetchPagination,
    loading: props.loading,
    dataSource: props.dataSource,
    onDataSourceChange: props.onDataSourceChange,
    onLoad: onLoad,
    onLoadingChange: onLoadingChange,
    onRequestError: onRequestError,
    postData: postData,
    revalidateOnFocus: (_props$revalidateOnFo = props.revalidateOnFocus) !== null && _props$revalidateOnFo !== void 0 ? _props$revalidateOnFo : true,
    manual: formSearch === undefined,
    polling: polling,
    effects: [stringify(params), stringify(formSearch), stringify(proFilter), stringify(proSort)],
    debounceTime: props.debounceTime,
    onPageInfoChange: function onPageInfoChange(pageInfo) {
      // 总是触发一下 onChange 和  onShowSizeChange
      // 目前只有 List 和 Table 支持分页, List 有分页的时候打断 Table 的分页
      if (propsPagination && type !== 'list') {
        var _propsPagination$onCh, _propsPagination$onSh;

        propsPagination === null || propsPagination === void 0 ? void 0 : (_propsPagination$onCh = propsPagination.onChange) === null || _propsPagination$onCh === void 0 ? void 0 : _propsPagination$onCh.call(propsPagination, pageInfo.current, pageInfo.pageSize);
        propsPagination === null || propsPagination === void 0 ? void 0 : (_propsPagination$onSh = propsPagination.onShowSizeChange) === null || _propsPagination$onSh === void 0 ? void 0 : _propsPagination$onSh.call(propsPagination, pageInfo.current, pageInfo.pageSize);
      }
    }
  }); // ============================ END ============================

  /** 默认聚焦的时候重新请求数据，这样可以保证数据都是最新的。 */

  useEffect(function () {
    var _props$form;

    // 手动模式和 request 为空都不生效
    if (!props.manualRequest || !props.request || props.revalidateOnFocus === false || !((_props$form = props.form) === null || _props$form === void 0 ? void 0 : _props$form.ignoreRules)) return; // 聚焦时重新请求事件

    var visibilitychange = function visibilitychange() {
      if (document.visibilityState === 'visible') action.reload();
    };

    document.addEventListener('visibilitychange', visibilitychange);
    return function () {
      return document.removeEventListener('visibilitychange', visibilitychange);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  /** SelectedRowKeys受控处理selectRows */

  var preserveRecordsRef = React.useRef(new Map()); // ============================ RowKey ============================

  var getRowKey = React.useMemo(function () {
    if (typeof rowKey === 'function') {
      return rowKey;
    }

    return function (record, index) {
      var _record$rowKey;

      if (index === -1) {
        return record === null || record === void 0 ? void 0 : record[rowKey];
      } // 如果 props 中有name 的话，用index 来做行好，这样方便转化为 index


      if (props.name) {
        return index === null || index === void 0 ? void 0 : index.toString();
      }

      return (_record$rowKey = record === null || record === void 0 ? void 0 : record[rowKey]) !== null && _record$rowKey !== void 0 ? _record$rowKey : index === null || index === void 0 ? void 0 : index.toString();
    };
  }, [props.name, rowKey]);
  useMemo(function () {
    var _action$dataSource;

    if ((_action$dataSource = action.dataSource) === null || _action$dataSource === void 0 ? void 0 : _action$dataSource.length) {
      var newCache = new Map();
      var keys = action.dataSource.map(function (data) {
        var _data$rowKey;

        var dataRowKey = (_data$rowKey = data === null || data === void 0 ? void 0 : data[rowKey]) !== null && _data$rowKey !== void 0 ? _data$rowKey : data === null || data === void 0 ? void 0 : data.key;
        newCache.set(dataRowKey, data);
        return dataRowKey;
      });
      preserveRecordsRef.current = newCache;
      return keys;
    }

    return [];
  }, [action.dataSource, rowKey]);
  useEffect(function () {
    selectedRowsRef.current = selectedRowKeys === null || selectedRowKeys === void 0 ? void 0 : selectedRowKeys.map(function (key) {
      var _preserveRecordsRef$c;

      return (_preserveRecordsRef$c = preserveRecordsRef.current) === null || _preserveRecordsRef$c === void 0 ? void 0 : _preserveRecordsRef$c.get(key);
    });
  }, [selectedRowKeys]);
  /** 页面编辑的计算 */

  var pagination = useMemo(function () {
    var pageConfig = _objectSpread(_objectSpread({}, action.pageInfo), {}, {
      setPageInfo: function setPageInfo(_ref3) {
        var pageSize = _ref3.pageSize,
            current = _ref3.current;
        var pageInfo = action.pageInfo; // pageSize 发生改变，并且你不是在第一页，切回到第一页
        // 这样可以防止出现 跳转到一个空的数据页的问题

        if (pageSize === pageInfo.pageSize || pageInfo.current === 1) {
          action.setPageInfo({
            pageSize: pageSize,
            current: current
          });
          return;
        } // 通过request的时候清空数据，然后刷新不然可能会导致 pageSize 没有数据多


        if (request) action.setDataSource([]);
        action.setPageInfo({
          pageSize: pageSize,
          current: 1
        });
      }
    });

    return mergePagination(propsPagination, pageConfig, intl); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [propsPagination, action, intl]);
  var counter = Container.useContainer(); // 设置 name 到 store 中，里面用了 ref ，所以不用担心直接 set

  counter.setPrefixName(props.name);
  /** 清空所有的选中项 */

  var _onCleanSelected = useCallback(function () {
    if (propsRowSelection && propsRowSelection.onChange) {
      propsRowSelection.onChange([], []);
    }

    setSelectedRowsAndKey([], []);
  }, [propsRowSelection, setSelectedRowsAndKey]);

  counter.setAction(actionRef.current);
  counter.propsRef.current = props;
  /** 可编辑行的相关配置 */

  var editableUtils = useEditableArray(_objectSpread(_objectSpread({}, props.editable), {}, {
    tableName: props.name,
    getRowKey: getRowKey,
    childrenColumnName: (_props$expandable = props.expandable) === null || _props$expandable === void 0 ? void 0 : _props$expandable.childrenColumnName,
    dataSource: action.dataSource || [],
    setDataSource: function setDataSource(data) {
      var _props$editable3, _props$editable3$onVa;

      (_props$editable3 = props.editable) === null || _props$editable3 === void 0 ? void 0 : (_props$editable3$onVa = _props$editable3.onValuesChange) === null || _props$editable3$onVa === void 0 ? void 0 : _props$editable3$onVa.call(_props$editable3, undefined, data);
      action.setDataSource(data);
    }
  }));
  /** 绑定 action */

  useActionType(actionRef, action, {
    fullScreen: function fullScreen() {
      if (!rootRef.current || !document.fullscreenEnabled) {
        return;
      }

      if (document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        rootRef.current.requestFullscreen();
      }
    },
    onCleanSelected: function onCleanSelected() {
      // 清空选中行
      _onCleanSelected();
    },
    resetAll: function resetAll() {
      var _formRef$current;

      // 清空选中行
      _onCleanSelected(); // 清空筛选


      setProFilter({}); // 清空排序

      setProSort({}); // 清空 toolbar 搜索

      counter.setKeyWords(undefined); // 重置页码

      action.setPageInfo({
        current: 1
      }); // 重置表单

      formRef === null || formRef === void 0 ? void 0 : (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.resetFields();
      setFormSearch({});
    },
    editableUtils: editableUtils
  });

  if (propsActionRef) {
    // @ts-ignore
    propsActionRef.current = actionRef.current;
  } // ---------- 列计算相关 start  -----------------


  var tableColumn = useMemo(function () {
    return genProColumnToColumn({
      columns: propsColumns,
      counter: counter,
      columnEmptyText: columnEmptyText,
      type: type,
      editableUtils: editableUtils
    }).sort(columnSort(counter.columnsMap)); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [propsColumns, counter === null || counter === void 0 ? void 0 : counter.sortKeyColumns, counter === null || counter === void 0 ? void 0 : counter.columnsMap, columnEmptyText, type, // eslint-disable-next-line react-hooks/exhaustive-deps
  editableUtils.editableKeys && editableUtils.editableKeys.join(',')]);
  /** Table Column 变化的时候更新一下，这个参数将会用于渲染 */

  useDeepCompareEffectDebounce(function () {
    if (tableColumn && tableColumn.length > 0) {
      // 重新生成key的字符串用于排序
      var columnKeys = tableColumn.map(function (item) {
        return genColumnKey(item.key, item.index);
      });
      counter.setSortKeyColumns(columnKeys);
    }
  }, [tableColumn], ['render', 'renderFormItem'], 100);
  /** 同步 Pagination，支持受控的 页码 和 pageSize */

  useDeepCompareEffect(function () {
    var pageInfo = action.pageInfo;

    var _ref4 = propsPagination || {},
        _ref4$current = _ref4.current,
        current = _ref4$current === void 0 ? pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current : _ref4$current,
        _ref4$pageSize = _ref4.pageSize,
        pageSize = _ref4$pageSize === void 0 ? pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize : _ref4$pageSize;

    if (propsPagination && (current || pageSize) && (pageSize !== (pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageSize) || current !== (pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.current))) {
      action.setPageInfo({
        pageSize: pageSize || pageInfo.pageSize,
        current: current || pageInfo.current
      });
    }
  }, [propsPagination && propsPagination.pageSize, propsPagination && propsPagination.current]);
  /** 行选择相关的问题 */

  var rowSelection = _objectSpread(_objectSpread({
    selectedRowKeys: selectedRowKeys
  }, propsRowSelection), {}, {
    onChange: function onChange(keys, rows) {
      if (propsRowSelection && propsRowSelection.onChange) {
        propsRowSelection.onChange(keys, rows);
      }

      setSelectedRowsAndKey(keys, rows);
    }
  });
  /** 是不是 LightFilter, LightFilter 有一些特殊的处理 */


  var isLightFilter = search !== false && (search === null || search === void 0 ? void 0 : search.filterType) === 'light';
  var searchNode = search === false && type !== 'form' ? null : /*#__PURE__*/React.createElement(FormRender, {
    pagination: pagination,
    beforeSearchSubmit: beforeSearchSubmit,
    action: actionRef,
    columns: propsColumns,
    onFormSearchSubmit: function onFormSearchSubmit(values) {
      setFormSearch(values);
    },
    onReset: props.onReset,
    onSubmit: props.onSubmit,
    loading: !!action.loading,
    manualRequest: manualRequest,
    search: search,
    form: props.form,
    formRef: formRef,
    type: props.type || 'table',
    cardBordered: props.cardBordered,
    dateFormatter: props.dateFormatter
  });
  /** 内置的工具栏 */

  var toolbarDom = toolBarRender === false ? null : /*#__PURE__*/React.createElement(Toolbar, {
    headerTitle: headerTitle,
    hideToolbar: options === false && !headerTitle && !toolBarRender && !toolbar && !isLightFilter,
    selectedRows: selectedRowsRef.current,
    selectedRowKeys: selectedRowKeys,
    tableColumn: tableColumn,
    tooltip: tooltip,
    toolbar: toolbar,
    onFormSearchSubmit: function onFormSearchSubmit(newValues) {
      setFormSearch(_objectSpread(_objectSpread({}, formSearch), newValues));
    },
    searchNode: isLightFilter ? searchNode : null,
    options: options,
    actionRef: actionRef,
    toolBarRender: toolBarRender
  });
  /** 内置的多选操作栏 */

  var alertDom = propsRowSelection !== false ? /*#__PURE__*/React.createElement(Alert, {
    selectedRowKeys: selectedRowKeys,
    selectedRows: selectedRowsRef.current,
    onCleanSelected: _onCleanSelected,
    alertOptionRender: rest.tableAlertOptionRender,
    alertInfoRender: tableAlertRender,
    alwaysShowAlert: propsRowSelection === null || propsRowSelection === void 0 ? void 0 : propsRowSelection.alwaysShowAlert
  }) : null;
  return /*#__PURE__*/React.createElement(TableRender, _extends({}, props, {
    name: isEditorTable,
    rootRef: rootRef,
    size: counter.tableSize,
    onSizeChange: counter.setTableSize,
    pagination: pagination,
    searchNode: searchNode,
    rowSelection: propsRowSelection !== false ? rowSelection : undefined,
    className: className,
    tableColumn: tableColumn,
    isLightFilter: isLightFilter,
    action: action,
    alertDom: alertDom,
    toolbarDom: toolbarDom,
    onSortChange: setProSort,
    onFilterChange: setProFilter,
    editableUtils: editableUtils
  }));
};
/**
 * 🏆 Use Ant Design Table like a Pro! 更快 更好 更方便
 *
 * @param props
 */


var ProviderWarp = function ProviderWarp(props) {
  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  return /*#__PURE__*/React.createElement(Container.Provider, {
    initialState: props
  }, /*#__PURE__*/React.createElement(ConfigProviderWrap, null, /*#__PURE__*/React.createElement(ErrorBoundary, null, /*#__PURE__*/React.createElement(ProTable, _extends({
    defaultClassName: getPrefixCls('pro-table')
  }, props)))));
};

ProviderWarp.Summary = _Table.Summary;
export default ProviderWarp;