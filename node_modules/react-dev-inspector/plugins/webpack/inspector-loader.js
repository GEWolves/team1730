"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @deprecated deprecated in v1.4.0
 *   migrate to `react-dev-inspector/plugins/babel`
 *   retain for backward compatibility <= v1.3.*
 */
const path_1 = __importDefault(require("path"));
const loader_utils_1 = require("loader-utils");
const parser_1 = require("@babel/parser");
const generator_1 = __importDefault(require("@babel/generator"));
const traverse_1 = __importDefault(require("@babel/traverse"));
const visitor_1 = require("../babel/visitor");
/**
 * [webpack compile time]
 *
 * inject line, column, relative-path to JSX html data attribute in source code
 *
 * @type webpack.loader.Loader
 * ref: https://astexplorer.net  +  @babel/parser
 */
function inspectorLoader(source) {
    var _a;
    const { rootContext: rootPath, resourcePath: filePath, } = this;
    /**
     * example:
     * rootPath: /home/xxx/project
     * filePath: /home/xxx/project/src/ooo/xxx.js
     * relativePath: src/ooo/xxx.js
     */
    const relativePath = path_1.default.relative(rootPath, filePath);
    const options = (0, loader_utils_1.getOptions)(this);
    const isSkip = (0, visitor_1.pathMatch)(filePath, options.excludes);
    if (isSkip) {
        return source;
    }
    const ast = (0, parser_1.parse)(source, Object.assign({ sourceType: 'module', allowUndeclaredExports: true, allowImportExportEverywhere: true, plugins: [
            'typescript',
            'jsx',
            'decorators-legacy',
            'classProperties',
            ...(_a = options === null || options === void 0 ? void 0 : options.babelPlugins) !== null && _a !== void 0 ? _a : [],
        ] }, options === null || options === void 0 ? void 0 : options.babelOptions));
    /**
     * astexplorer + @babel/parser
     * https://astexplorer.net
     */
    (0, traverse_1.default)(ast, {
        JSXOpeningElement: {
            enter(path) {
                (0, visitor_1.doJSXOpeningElement)(path.node, { relativePath });
            },
        },
    });
    const { code, } = (0, generator_1.default)(ast, {
        decoratorsBeforeExport: true,
    });
    return code;
}
exports.default = inspectorLoader;
