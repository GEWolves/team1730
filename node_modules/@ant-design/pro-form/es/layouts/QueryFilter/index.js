import _extends from "@babel/runtime/helpers/esm/extends";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import "antd/es/row/style";
import _Row from "antd/es/row";
import "antd/es/form/style";
import _Form from "antd/es/form";
import "antd/es/divider/style";
import _Divider from "antd/es/divider";
import "antd/es/col/style";
import _Col from "antd/es/col";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
var _excluded = ["collapsed", "layout", "defaultCollapsed", "defaultColsNumber", "span", "searchText", "resetText", "optionRender", "collapseRender", "onReset", "onCollapse", "labelWidth", "style", "split", "preserve", "ignoreRules"];
import { useContext } from 'react';
import React, { useMemo } from 'react';
import RcResizeObserver from 'rc-resize-observer';
import { useIntl } from '@ant-design/pro-provider';
import { isBrowser, useMountMergeState } from '@ant-design/pro-utils';
import useMergedState from "rc-util/es/hooks/useMergedState";
import BaseForm from '../../BaseForm';
import Actions from './Actions';
import classNames from 'classnames';
import './index.less';
var CONFIG_SPAN_BREAKPOINTS = {
  xs: 513,
  sm: 513,
  md: 785,
  lg: 992,
  xl: 1057,
  xxl: Infinity
};
/** 配置表单列变化的容器宽度断点 */

var BREAKPOINTS = {
  vertical: [// [breakpoint, cols, layout]
  [513, 1, 'vertical'], [785, 2, 'vertical'], [1057, 3, 'vertical'], [Infinity, 4, 'vertical']],
  default: [[513, 1, 'vertical'], [701, 2, 'vertical'], [1062, 3, 'horizontal'], [1352, 3, 'horizontal'], [Infinity, 4, 'horizontal']]
};
/**
 * 合并用户和默认的配置
 *
 * @param layout
 * @param width
 */

var getSpanConfig = function getSpanConfig(layout, width, span) {
  if (span && typeof span === 'number') {
    return {
      span: span,
      layout: layout
    };
  }

  var spanConfig = span ? Object.keys(span).map(function (key) {
    return [CONFIG_SPAN_BREAKPOINTS[key], 24 / span[key], 'horizontal'];
  }) : BREAKPOINTS[layout || 'default'];
  var breakPoint = (spanConfig || BREAKPOINTS.default).find(function (item) {
    return width < item[0] + 16;
  });
  return {
    span: 24 / breakPoint[1],
    layout: breakPoint[2]
  };
};

var flatMapItems = function flatMapItems(items, ignoreRules) {
  return items.flatMap(function (item) {
    var _item$props;

    if ((item === null || item === void 0 ? void 0 : item.type.displayName) === 'ProForm-Group' && !((_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.title)) {
      return item.props.children;
    }

    if (ignoreRules && /*#__PURE__*/React.isValidElement(item)) {
      var _item$props2;

      return /*#__PURE__*/React.cloneElement(item, _objectSpread(_objectSpread({}, item.props), {}, {
        formItemProps: _objectSpread(_objectSpread({}, (_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.formItemProps), {}, {
          rules: []
        })
      }));
    }

    return item;
  });
};

var QueryFilterContent = function QueryFilterContent(props) {
  var intl = useIntl();
  var resetText = props.resetText || intl.getMessage('tableForm.reset', '重置');
  var searchText = props.searchText || intl.getMessage('tableForm.search', '搜索');

  var _useMergedState = useMergedState(function () {
    return props.defaultCollapsed && !!props.submitter;
  }, {
    value: props.collapsed,
    onChange: props.onCollapse
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      collapsed = _useMergedState2[0],
      setCollapsed = _useMergedState2[1];

  var optionRender = props.optionRender,
      collapseRender = props.collapseRender,
      split = props.split,
      items = props.items,
      spanSize = props.spanSize,
      showLength = props.showLength;
  var submitter = useMemo(function () {
    if (!props.submitter || optionRender === false) {
      return null;
    }

    return /*#__PURE__*/React.cloneElement(props.submitter, _objectSpread({
      searchConfig: {
        resetText: resetText,
        submitText: searchText
      },
      render: optionRender ? function (_, dom) {
        return optionRender(_objectSpread(_objectSpread({}, props), {}, {
          resetText: resetText,
          searchText: searchText
        }), props, dom);
      } : optionRender
    }, props.submitter.props));
  }, [props, resetText, searchText, optionRender]); // totalSpan 统计控件占的位置，计算 offset 保证查询按钮在最后一列

  var totalSpan = 0;
  var itemLength = 0; // for split compute

  var currentSpan = 0;
  var doms = flatMapItems(items, props.ignoreRules).map(function (item, index) {
    var _item$props3, _item$props4, _item$props5;

    // 如果 formItem 自己配置了 hidden，默认使用它自己的
    var colSize = /*#__PURE__*/React.isValidElement(item) ? item === null || item === void 0 ? void 0 : (_item$props3 = item.props) === null || _item$props3 === void 0 ? void 0 : _item$props3.colSize : 1;
    var colSpan = Math.min(spanSize.span * (colSize || 1), 24); // 计算总的 totalSpan 长度

    totalSpan += colSpan;
    var hidden = (item === null || item === void 0 ? void 0 : (_item$props4 = item.props) === null || _item$props4 === void 0 ? void 0 : _item$props4.hidden) || // 如果收起了
    collapsed && // 如果 超过显示长度 且 总长度超过了 24
    index >= showLength - 1 && !!index && totalSpan >= 24;
    itemLength += 1;
    var itemKey = /*#__PURE__*/React.isValidElement(item) && (item.key || "".concat((_item$props5 = item.props) === null || _item$props5 === void 0 ? void 0 : _item$props5.name)) || index;

    if ( /*#__PURE__*/React.isValidElement(item) && hidden) {
      if (!props.preserve) {
        return {
          itemDom: null,
          colSpan: colSpan,
          hidden: true
        };
      }

      return {
        itemDom: /*#__PURE__*/React.cloneElement(item, {
          hidden: true,
          key: itemKey || index
        }),
        hidden: true,
        colSpan: colSpan
      };
    }

    return {
      itemDom: item,
      colSpan: colSpan,
      hidden: false
    };
  }).map(function (itemProps, index) {
    var _itemDom$props, _itemDom$props2;

    var itemDom = itemProps.itemDom,
        colSpan = itemProps.colSpan;
    var hidden = itemDom === null || itemDom === void 0 ? void 0 : (_itemDom$props = itemDom.props) === null || _itemDom$props === void 0 ? void 0 : _itemDom$props.hidden;
    if (hidden) return itemDom; // 每一列的key, 一般是存在的

    var itemKey = /*#__PURE__*/React.isValidElement(itemDom) && (itemDom.key || "".concat((_itemDom$props2 = itemDom.props) === null || _itemDom$props2 === void 0 ? void 0 : _itemDom$props2.name)) || index;

    if (24 - currentSpan % 24 < colSpan) {
      // 如果当前行空余位置放不下，那么折行
      totalSpan += 24 - currentSpan % 24;
      currentSpan += 24 - currentSpan % 24;
    }

    currentSpan += colSpan;
    var colItem = /*#__PURE__*/React.createElement(_Col, {
      key: itemKey,
      span: colSpan
    }, itemDom);

    if (split && currentSpan % 24 === 0 && index < itemLength - 1) {
      return [colItem, /*#__PURE__*/React.createElement(_Col, {
        span: "24",
        key: "line"
      }, /*#__PURE__*/React.createElement(_Divider, {
        style: {
          marginTop: -8,
          marginBottom: 16
        },
        dashed: true
      }))];
    }

    return colItem;
  });
  /** 是否需要展示 collapseRender */

  var needCollapseRender = useMemo(function () {
    if (totalSpan < 24 || itemLength < showLength) {
      return false;
    }

    return true;
  }, [itemLength, showLength, totalSpan]);
  var offset = useMemo(function () {
    var offsetSpan = currentSpan % 24 + spanSize.span;
    return 24 - offsetSpan;
  }, [currentSpan, spanSize.span]);
  return /*#__PURE__*/React.createElement(_Row, {
    gutter: 24,
    justify: "start",
    key: "resize-observer-row"
  }, doms, submitter && /*#__PURE__*/React.createElement(_Col, {
    key: "submitter",
    span: spanSize.span,
    offset: offset,
    style: {
      textAlign: 'right'
    }
  }, /*#__PURE__*/React.createElement(_Form.Item, {
    label: " ",
    colon: false,
    className: "pro-form-query-filter-actions"
  }, /*#__PURE__*/React.createElement(Actions, {
    key: "pro-form-query-filter-actions",
    collapsed: collapsed,
    collapseRender: needCollapseRender ? collapseRender : false,
    submitter: submitter,
    setCollapsed: setCollapsed
  }))));
};

var defaultWidth = isBrowser() ? document.body.clientWidth : 1024;

function QueryFilter(props) {
  var controlCollapsed = props.collapsed,
      layout = props.layout,
      _props$defaultCollaps = props.defaultCollapsed,
      defaultCollapsed = _props$defaultCollaps === void 0 ? true : _props$defaultCollaps,
      defaultColsNumber = props.defaultColsNumber,
      span = props.span,
      searchText = props.searchText,
      resetText = props.resetText,
      optionRender = props.optionRender,
      collapseRender = props.collapseRender,
      onReset = props.onReset,
      onCollapse = props.onCollapse,
      _props$labelWidth = props.labelWidth,
      labelWidth = _props$labelWidth === void 0 ? '80' : _props$labelWidth,
      style = props.style,
      split = props.split,
      _props$preserve = props.preserve,
      preserve = _props$preserve === void 0 ? true : _props$preserve,
      ignoreRules = props.ignoreRules,
      rest = _objectWithoutProperties(props, _excluded);

  var context = useContext(_ConfigProvider.ConfigContext);
  var baseClassName = context.getPrefixCls('pro-form-query-filter');

  var _useMountMergeState = useMountMergeState(function () {
    return typeof (style === null || style === void 0 ? void 0 : style.width) === 'number' ? style === null || style === void 0 ? void 0 : style.width : defaultWidth;
  }),
      _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),
      width = _useMountMergeState2[0],
      setWidth = _useMountMergeState2[1];

  var spanSize = useMemo(function () {
    return getSpanConfig(layout, width + 16, span);
  }, [layout, width, span]);
  var showLength = useMemo(function () {
    if (defaultColsNumber !== undefined) {
      return defaultColsNumber;
    }

    return Math.max(1, 24 / spanSize.span);
  }, [defaultColsNumber, spanSize.span]);
  /** 计算最大宽度防止溢出换行 */

  var formItemFixStyle = useMemo(function () {
    if (labelWidth && spanSize.layout !== 'vertical' && labelWidth !== 'auto') {
      return {
        labelCol: {
          flex: "0 0 ".concat(labelWidth, "px")
        },
        wrapperCol: {
          style: {
            maxWidth: "calc(100% - ".concat(labelWidth, "px)")
          }
        },
        style: {
          flexWrap: 'nowrap'
        }
      };
    }

    return undefined;
  }, [spanSize.layout, labelWidth]);
  return /*#__PURE__*/React.createElement(RcResizeObserver, {
    key: "resize-observer",
    onResize: function onResize(offset) {
      if (width !== offset.width && offset.width > 17) {
        setWidth(offset.width);
      }
    }
  }, /*#__PURE__*/React.createElement(BaseForm, _extends({
    isKeyPressSubmit: true,
    preserve: preserve
  }, rest, {
    className: classNames(baseClassName, rest.className),
    onReset: onReset,
    style: style,
    layout: spanSize.layout,
    fieldProps: {
      style: {
        width: '100%'
      }
    },
    formItemProps: formItemFixStyle,
    groupProps: {
      titleStyle: {
        display: 'inline-block',
        marginRight: 16
      }
    },
    contentRender: function contentRender(items, renderSubmitter, form) {
      return /*#__PURE__*/React.createElement(QueryFilterContent, {
        spanSize: spanSize,
        collapsed: controlCollapsed,
        form: form,
        collapseRender: collapseRender,
        defaultCollapsed: defaultCollapsed,
        onCollapse: onCollapse,
        optionRender: optionRender,
        submitter: renderSubmitter,
        items: items,
        split: split,
        resetText: props.resetText,
        searchText: props.searchText,
        preserve: preserve,
        ignoreRules: ignoreRules,
        showLength: showLength
      });
    }
  })));
}

export default QueryFilter;