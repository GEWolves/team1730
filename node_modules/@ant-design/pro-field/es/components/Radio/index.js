import _extends from "@babel/runtime/helpers/esm/extends";
import "antd/es/radio/style";
import _Radio from "antd/es/radio";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import "antd/es/spin/style";
import _Spin from "antd/es/spin";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["radioType", "renderFormItem", "mode", "render"];
import React, { useContext, useImperativeHandle, useRef } from 'react';
import classNames from 'classnames';
import './index.less';
import { ObjToMap, proFieldParsingText, useFieldFetchData } from '../Select';
/**
 * 单选组件
 *
 * @param param0
 * @param ref
 */

var FieldRadio = function FieldRadio(_ref, ref) {
  var radioType = _ref.radioType,
      renderFormItem = _ref.renderFormItem,
      mode = _ref.mode,
      render = _ref.render,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var layoutClassName = getPrefixCls('pro-field-radio');

  var _useFieldFetchData = useFieldFetchData(rest),
      _useFieldFetchData2 = _slicedToArray(_useFieldFetchData, 3),
      loading = _useFieldFetchData2[0],
      options = _useFieldFetchData2[1],
      _fetchData = _useFieldFetchData2[2];

  var radioRef = useRef();
  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, radioRef.current || {}), {}, {
      fetchData: function fetchData() {
        return _fetchData();
      }
    });
  });

  if (loading) {
    return /*#__PURE__*/React.createElement(_Spin, {
      size: "small"
    });
  }

  if (mode === 'read') {
    var optionsValueEnum = (options === null || options === void 0 ? void 0 : options.length) ? options === null || options === void 0 ? void 0 : options.reduce(function (pre, cur) {
      var _cur$value;

      return _objectSpread(_objectSpread({}, pre), {}, _defineProperty({}, (_cur$value = cur.value) !== null && _cur$value !== void 0 ? _cur$value : '', cur.label));
    }, {}) : undefined;
    var dom = /*#__PURE__*/React.createElement(React.Fragment, null, proFieldParsingText(rest.text, ObjToMap(rest.valueEnum || optionsValueEnum)));

    if (render) {
      return render(rest.text, _objectSpread({
        mode: mode
      }, rest.fieldProps), dom) || null;
    }

    return dom;
  }

  if (mode === 'edit') {
    var _rest$fieldProps;

    var RadioComponents = radioType === 'button' ? _Radio.Button : _Radio;

    var _dom = /*#__PURE__*/React.createElement(_Radio.Group, _extends({
      ref: radioRef
    }, rest.fieldProps, {
      className: classNames((_rest$fieldProps = rest.fieldProps) === null || _rest$fieldProps === void 0 ? void 0 : _rest$fieldProps.className, "".concat(layoutClassName, "-").concat(rest.fieldProps.layout || 'horizontal')),
      options: undefined
    }), options === null || options === void 0 ? void 0 : options.map(function (item) {
      return /*#__PURE__*/React.createElement(RadioComponents, _extends({
        key: item.value
      }, item), item.label);
    }));

    if (renderFormItem) {
      return renderFormItem(rest.text, _objectSpread({
        mode: mode
      }, rest.fieldProps), _dom) || null;
    }

    return _dom;
  }

  return null;
};

export default /*#__PURE__*/React.forwardRef(FieldRadio);