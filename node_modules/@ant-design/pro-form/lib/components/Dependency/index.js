"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd/es/form/style");

var _form = _interopRequireDefault(require("antd/es/form"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _get = _interopRequireDefault(require("rc-util/lib/utils/get"));

var _set = _interopRequireDefault(require("rc-util/lib/utils/set"));

var _List = require("../List");

var _proUtils = require("@ant-design/pro-utils");

var _excluded = ["name", "children", "ignoreFormListField"];

var ProFormDependency = function ProFormDependency(_ref) {
  var name = _ref.name,
      children = _ref.children,
      ignoreFormListField = _ref.ignoreFormListField,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var context = (0, _react.useContext)(_proUtils.ProFormContext); // ProFromList 的 filed，里面有name和key

  var formListField = (0, _react.useContext)(_List.FormListContext);
  var names = (0, _react.useMemo)(function () {
    if (formListField.name === undefined) {
      return name;
    }

    return name.map(function (itemName) {
      return [formListField.listName, itemName].flat(1);
    });
  }, [formListField.listName, formListField.name, name]);
  return /*#__PURE__*/_react.default.createElement(_form.default.Item, (0, _extends2.default)({}, rest, {
    noStyle: true,
    shouldUpdate: function shouldUpdate(prevValues, nextValues, info) {
      var _rest$shouldUpdate;

      var finalNames = names; // ignoreFormListField 为 true 时，应从全局取值，要将 names 中各项的路径前缀(formListField.listName)剥离掉

      if (ignoreFormListField && Array.isArray(formListField.listName) && formListField.listName.length > 0) {
        finalNames = names.map(function (nameItem) {
          return Array.isArray(nameItem) ? nameItem.slice(formListField.listName.length) : nameItem;
        });
      }

      if (rest.shouldUpdate === false) return false;
      if (rest.shouldUpdate === true) return true;
      var isUpdate = finalNames.some(function (nameItem) {
        var arrayName = Array.isArray(nameItem) ? nameItem : [nameItem];
        return !(0, _proUtils.isDeepEqualReact)((0, _get.default)(prevValues, arrayName), (0, _get.default)(nextValues, arrayName));
      });
      if (rest.shouldUpdate === undefined) return isUpdate;
      var shouldUpdate = (_rest$shouldUpdate = rest.shouldUpdate) === null || _rest$shouldUpdate === void 0 ? void 0 : _rest$shouldUpdate.call(rest, prevValues, nextValues, info);
      return isUpdate && !!shouldUpdate;
    }
  }), function (form) {
    // 不在 FormList 中时，返回声明的全局依赖值
    if (formListField.name === undefined) {
      var values = names.reduce(function (pre, next) {
        var _context$getFieldsFor;

        var value = context === null || context === void 0 ? void 0 : (_context$getFieldsFor = context.getFieldsFormatValue) === null || _context$getFieldsFor === void 0 ? void 0 : _context$getFieldsFor.call(context, [next]);
        var noFormatValue = form.getFieldsValue([next]);
        return (0, _proUtils.merge)({}, pre, noFormatValue, value);
      }, {});
      return children === null || children === void 0 ? void 0 : children((0, _objectSpread2.default)({}, values), form);
    } // 在 FormList 中时
    // ignoreFormListField === true 时取全局依赖值


    if (ignoreFormListField) {
      var _nameValues = name.reduce(function (pre, namePath) {
        var finalNamePath = [namePath].flat(1);
        var fieldValue = form.getFieldValue(finalNamePath);
        return (0, _set.default)(pre, [namePath].flat(1), fieldValue, false);
      }, {});

      return children === null || children === void 0 ? void 0 : children((0, _objectSpread2.default)({}, _nameValues), form);
    } // ignoreFormListField === false 时，取局部依赖值


    var nameValues = name.reduce(function (pre, namePath) {
      var _context$getFieldForm, _context$getFieldForm2;

      var finalNamePath = [formListField.listName, namePath].flat(1);
      var fieldValue = (_context$getFieldForm = (_context$getFieldForm2 = context.getFieldFormatValue) === null || _context$getFieldForm2 === void 0 ? void 0 : _context$getFieldForm2.call(context, finalNamePath)) !== null && _context$getFieldForm !== void 0 ? _context$getFieldForm : form.getFieldValue(finalNamePath);
      return (0, _set.default)(pre, [namePath].flat(1), fieldValue, false);
    }, {});
    return children === null || children === void 0 ? void 0 : children((0, _objectSpread2.default)({}, nameValues), form);
  });
};

var _default = ProFormDependency;
exports.default = _default;