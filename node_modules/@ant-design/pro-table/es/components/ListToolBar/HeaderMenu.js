import "antd/es/dropdown/style";
import _Dropdown from "antd/es/dropdown";
import "antd/es/space/style";
import _Space from "antd/es/space";
import "antd/es/menu/style";
import _Menu from "antd/es/menu";
import "antd/es/tabs/style";
import _Tabs from "antd/es/tabs";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
var _excluded = ["label", "key"];
import React from 'react';
import { DownOutlined } from '@ant-design/icons';
import classNames from 'classnames';
import useMergedState from "rc-util/es/hooks/useMergedState";
import './index.less';

var HeaderMenu = function HeaderMenu(props) {
  var _props$items = props.items,
      items = _props$items === void 0 ? [] : _props$items,
      _props$type = props.type,
      type = _props$type === void 0 ? 'inline' : _props$type,
      prefixCls = props.prefixCls,
      propActiveKey = props.activeKey;

  var _useMergedState = useMergedState(propActiveKey, {
    value: propActiveKey,
    onChange: props.onChange
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      activeKey = _useMergedState2[0],
      setActiveKey = _useMergedState2[1];

  if (items.length < 1) {
    return null;
  }

  var activeItem = items.find(function (item) {
    return item.key === activeKey;
  }) || items[0];

  if (type === 'inline') {
    return /*#__PURE__*/React.createElement("div", {
      className: classNames("".concat(prefixCls, "-menu"), "".concat(prefixCls, "-inline-menu"))
    }, items.map(function (item, index) {
      return /*#__PURE__*/React.createElement("div", {
        key: item.key || index,
        onClick: function onClick() {
          setActiveKey(item.key);
        },
        className: classNames("".concat(prefixCls, "-inline-menu-item"), activeItem.key === item.key ? "".concat(prefixCls, "-inline-menu-item-active") : undefined)
      }, item.label);
    }));
  }

  if (type === 'tab') {
    return /*#__PURE__*/React.createElement(_Tabs, {
      activeKey: activeItem.key,
      onTabClick: function onTabClick(key) {
        return setActiveKey(key);
      }
    }, items.map(function (_ref, index) {
      var label = _ref.label,
          key = _ref.key,
          rest = _objectWithoutProperties(_ref, _excluded);

      return /*#__PURE__*/React.createElement(_Tabs.TabPane, _extends({
        tab: label,
        key: key || index
      }, rest));
    }));
  }

  return /*#__PURE__*/React.createElement("div", {
    className: classNames("".concat(prefixCls, "-menu"), "".concat(prefixCls, "-dropdownmenu"))
  }, /*#__PURE__*/React.createElement(_Dropdown, {
    trigger: ['click'],
    overlay: /*#__PURE__*/React.createElement(_Menu, {
      selectedKeys: [activeItem.key],
      onClick: function onClick(item) {
        setActiveKey(item.key);
      }
    }, items.map(function (item, index) {
      return /*#__PURE__*/React.createElement(_Menu.Item, {
        key: item.key || index,
        disabled: item.disabled
      }, item.label);
    }))
  }, /*#__PURE__*/React.createElement(_Space, {
    className: "".concat(prefixCls, "-dropdownmenu-label")
  }, activeItem.label, /*#__PURE__*/React.createElement(DownOutlined, null))));
};

export default HeaderMenu;