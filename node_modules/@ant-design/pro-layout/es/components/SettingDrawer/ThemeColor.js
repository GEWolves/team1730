import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["color", "check"];
import './ThemeColor.less';
import { CheckOutlined } from '@ant-design/icons';
import React from 'react';
var Tag = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var color = _ref.color,
      check = _ref.check,
      rest = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    style: {
      backgroundColor: color
    },
    ref: ref
  }), check ? /*#__PURE__*/React.createElement(CheckOutlined, null) : '');
});

var ThemeColor = function ThemeColor(_ref2, ref) {
  var value = _ref2.value,
      colorList = _ref2.colorList,
      onChange = _ref2.onChange,
      formatMessage = _ref2.formatMessage;

  if (!colorList || (colorList === null || colorList === void 0 ? void 0 : colorList.length) < 1) {
    return null;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: "theme-color",
    ref: ref
  }, /*#__PURE__*/React.createElement("div", {
    className: "theme-color-content"
  }, colorList === null || colorList === void 0 ? void 0 : colorList.map(function (_ref3) {
    var key = _ref3.key,
        color = _ref3.color;
    if (!key) return;
    return /*#__PURE__*/React.createElement(_Tooltip, {
      key: color,
      title: formatMessage({
        id: "app.setting.themecolor.".concat(key)
      })
    }, /*#__PURE__*/React.createElement(Tag, {
      className: "theme-color-block",
      color: color,
      check: value === color,
      onClick: function onClick() {
        return onChange && onChange(color);
      }
    }));
  })));
};

export default /*#__PURE__*/React.forwardRef(ThemeColor);