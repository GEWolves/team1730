import "antd/es/form/style";
import _Form from "antd/es/form";
import "antd/es/space/style";
import _Space from "antd/es/space";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import "antd/es/button/style";
import _Button from "antd/es/button";
import "antd/es/steps/style";
import _Steps from "antd/es/steps";
import _extends from "@babel/runtime/helpers/esm/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
var _excluded = ["current", "onCurrentChange", "submitter", "stepsFormRender", "stepsRender", "stepFormRender", "stepsProps", "onFinish", "formProps", "containerStyle", "formRef", "formMapRef"];
import React, { useRef, useCallback, useEffect, useContext, useImperativeHandle } from 'react';
import toArray from "rc-util/es/Children/toArray";
import useMergedState from "rc-util/es/hooks/useMergedState";
import classNames from 'classnames';
import { ConfigProviderWrap, useIntl } from '@ant-design/pro-provider';
import { useMountMergeState, merge, useRefFunction } from '@ant-design/pro-utils';
import StepForm from './StepForm';
import './index.less';
export var StepsFormProvide = /*#__PURE__*/React.createContext(undefined);

function StepsForm(props) {
  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-steps-form');

  var current = props.current,
      onCurrentChange = props.onCurrentChange,
      submitter = props.submitter,
      stepsFormRender = props.stepsFormRender,
      stepsRender = props.stepsRender,
      stepFormRender = props.stepFormRender,
      stepsProps = props.stepsProps,
      onFinish = props.onFinish,
      formProps = props.formProps,
      containerStyle = props.containerStyle,
      formRef = props.formRef,
      propsFormMapRef = props.formMapRef,
      rest = _objectWithoutProperties(props, _excluded);

  var formDataRef = useRef(new Map());
  var formMapRef = useRef(new Map());
  var formArrayRef = useRef([]);

  var _useMountMergeState = useMountMergeState([]),
      _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),
      formArray = _useMountMergeState2[0],
      setFormArray = _useMountMergeState2[1];

  var _useMountMergeState3 = useMountMergeState(false),
      _useMountMergeState4 = _slicedToArray(_useMountMergeState3, 2),
      loading = _useMountMergeState4[0],
      setLoading = _useMountMergeState4[1];

  var intl = useIntl();
  /** 受控的方式来操作表单 */

  var _useMergedState = useMergedState(0, {
    value: props.current,
    onChange: props.onCurrentChange
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      step = _useMergedState2[0],
      setStep = _useMergedState2[1];
  /** 注册一个form进入，方便进行 props 的修改 */


  var regForm = useCallback(function (name, childrenFormProps) {
    formMapRef.current.set(name, childrenFormProps);
  }, []);
  /** 接触挂载掉这个 form，同时步数 -1 */

  var unRegForm = useCallback(function (name) {
    formMapRef.current.delete(name);
    formDataRef.current.delete(name);
  }, []);
  /** Children 计算完成之后，重新生成一下当前的步骤列表 */

  useEffect(function () {
    setFormArray(Array.from(formMapRef.current.keys())); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [Array.from(formMapRef.current.keys()).join(',')]);
  useImperativeHandle(propsFormMapRef, function () {
    return formArrayRef.current;
  });
  useImperativeHandle(formRef, function () {
    var _formArrayRef$current;

    return (_formArrayRef$current = formArrayRef.current[step || 0]) === null || _formArrayRef$current === void 0 ? void 0 : _formArrayRef$current.current;
  }, [step]);
  /** ProForm处理了一下 from 的数据，在其中做了一些操作 如果使用 Provider 自带的，自带的数据处理就无法生效了 */

  var onFormFinish = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, formData) {
      var values, success;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              formDataRef.current.set(name, formData); // 如果是最后一步

              if (!(step === formMapRef.current.size - 1 || formMapRef.current.size === 0)) {
                _context.next = 19;
                break;
              }

              if (onFinish) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return");

            case 4:
              setLoading(true);
              values = merge.apply(void 0, [{}].concat(_toConsumableArray(Array.from(formDataRef.current.values()))));
              _context.prev = 6;
              _context.next = 9;
              return onFinish(values);

            case 9:
              success = _context.sent;

              if (success) {
                setStep(0);
                formArrayRef.current.forEach(function (form) {
                  var _form$current;

                  return (_form$current = form.current) === null || _form$current === void 0 ? void 0 : _form$current.resetFields();
                });
              }

              _context.next = 16;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](6);
              // eslint-disable-next-line no-console
              console.log(_context.t0);

            case 16:
              _context.prev = 16;
              setLoading(false);
              return _context.finish(16);

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[6, 13, 16, 19]]);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), // eslint-disable-next-line react-hooks/exhaustive-deps
  [step, formMapRef, onFinish]);
  var stepsDom = /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-steps-container"),
    style: {
      maxWidth: Math.min(formArray.length * 320, 1160)
    }
  }, /*#__PURE__*/React.createElement(_Steps, _extends({}, stepsProps, {
    current: step,
    onChange: undefined
  }), formArray.map(function (item) {
    var itemProps = formMapRef.current.get(item);
    return /*#__PURE__*/React.createElement(_Steps.Step, _extends({
      key: item,
      title: itemProps === null || itemProps === void 0 ? void 0 : itemProps.title
    }, itemProps === null || itemProps === void 0 ? void 0 : itemProps.stepProps));
  })));

  var onSubmit = function onSubmit() {
    var _from$current;

    var from = formArrayRef.current[step];
    (_from$current = from.current) === null || _from$current === void 0 ? void 0 : _from$current.submit();
  };
  /** 上一页功能 */


  var prePage = useRefFunction(function () {
    if (step < 1) return;
    setStep(step - 1);
  });
  var next = submitter !== false && /*#__PURE__*/React.createElement(_Button, _extends({
    key: "next",
    type: "primary",
    loading: loading
  }, submitter === null || submitter === void 0 ? void 0 : submitter.submitButtonProps, {
    onClick: function onClick() {
      var _submitter$onSubmit;

      submitter === null || submitter === void 0 ? void 0 : (_submitter$onSubmit = submitter.onSubmit) === null || _submitter$onSubmit === void 0 ? void 0 : _submitter$onSubmit.call(submitter);
      onSubmit();
    }
  }), intl.getMessage('stepsForm.next', '下一步'));
  var pre = submitter !== false && /*#__PURE__*/React.createElement(_Button, _extends({
    key: "pre"
  }, submitter === null || submitter === void 0 ? void 0 : submitter.resetButtonProps, {
    onClick: function onClick() {
      var _submitter$onReset;

      prePage();
      submitter === null || submitter === void 0 ? void 0 : (_submitter$onReset = submitter.onReset) === null || _submitter$onReset === void 0 ? void 0 : _submitter$onReset.call(submitter);
    }
  }), intl.getMessage('stepsForm.prev', '上一步'));
  var submit = submitter !== false && /*#__PURE__*/React.createElement(_Button, _extends({
    key: "submit",
    type: "primary",
    loading: loading
  }, submitter === null || submitter === void 0 ? void 0 : submitter.submitButtonProps, {
    onClick: function onClick() {
      var _submitter$onSubmit2;

      submitter === null || submitter === void 0 ? void 0 : (_submitter$onSubmit2 = submitter.onSubmit) === null || _submitter$onSubmit2 === void 0 ? void 0 : _submitter$onSubmit2.call(submitter);
      onSubmit();
    }
  }), intl.getMessage('stepsForm.submit', '提交'));
  var getActionButton = useRefFunction(function () {
    var index = step || 0;

    if (index < 1) {
      return [next];
    }

    if (index + 1 === formArray.length) {
      return [pre, submit];
    }

    return [pre, next];
  });
  var nextPage = useRefFunction(function () {
    if (step > formArray.length - 2) return;
    setStep(step + 1);
  });

  var renderSubmitter = function renderSubmitter() {
    var submitterDom = getActionButton();

    if (submitter && submitter.render) {
      var _formArrayRef$current2;

      var submitterProps = {
        form: (_formArrayRef$current2 = formArrayRef.current[step]) === null || _formArrayRef$current2 === void 0 ? void 0 : _formArrayRef$current2.current,
        onSubmit: onSubmit,
        step: step,
        onPre: prePage
      };
      return submitter.render(submitterProps, submitterDom);
    }

    if (submitter && (submitter === null || submitter === void 0 ? void 0 : submitter.render) === false) {
      return null;
    }

    return submitterDom;
  };

  var formDom = toArray(props.children).map(function (item, index) {
    var itemProps = item.props;
    var name = itemProps.name || "".concat(index);
    regForm(name, itemProps);
    /** 是否是当前的表单 */

    var isShow = step === index;
    var config = isShow ? {
      contentRender: stepFormRender,
      submitter: false
    } : {};
    return /*#__PURE__*/React.createElement("div", {
      className: classNames("".concat(prefixCls, "-step"), _defineProperty({}, "".concat(prefixCls, "-step-active"), isShow)),
      key: name
    }, /*#__PURE__*/React.cloneElement(item, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, config), formProps), itemProps), {}, {
      name: name,
      step: index,
      key: name
    })));
  });
  var finalStepsDom = props.stepsRender ? props.stepsRender(formArray.map(function (item) {
    var _formMapRef$current$g;

    return {
      key: item,
      title: (_formMapRef$current$g = formMapRef.current.get(item)) === null || _formMapRef$current$g === void 0 ? void 0 : _formMapRef$current$g.title
    };
  }), stepsDom) : stepsDom;
  var submitterDom = renderSubmitter();
  return /*#__PURE__*/React.createElement("div", {
    className: prefixCls
  }, /*#__PURE__*/React.createElement(_Form.Provider, rest, /*#__PURE__*/React.createElement(StepsFormProvide.Provider, {
    value: {
      loading: loading,
      setLoading: setLoading,
      keyArray: formArray,
      next: nextPage,
      formArrayRef: formArrayRef,
      formMapRef: formMapRef,
      unRegForm: unRegForm,
      onFormFinish: onFormFinish
    }
  }, stepsFormRender ? stepsFormRender( /*#__PURE__*/React.createElement(React.Fragment, null, finalStepsDom, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-container"),
    style: containerStyle
  }, formDom)), submitterDom) : /*#__PURE__*/React.createElement(React.Fragment, null, finalStepsDom, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-container"),
    style: containerStyle
  }, formDom, /*#__PURE__*/React.createElement(_Space, null, renderSubmitter()))))));
}

function StepsFormWarp(props) {
  return /*#__PURE__*/React.createElement(ConfigProviderWrap, null, /*#__PURE__*/React.createElement(StepsForm, props));
}

StepsFormWarp.StepForm = StepForm;
StepsFormWarp.useForm = _Form.useForm;
export default StepsFormWarp;