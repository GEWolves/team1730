"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const middlewares_1 = require("../webpack/middlewares");
const plugin = ({ onGetWebpackConfig }) => {
    if (process.env.NODE_ENV === 'production') {
        return;
    }
    onGetWebpackConfig((config) => {
        // inject source file path/line/column to JSX data attributes props
        config.module
            .rule('inspector')
            .test(/\.(jsx?|tsx)$/)
            .exclude.add(/node_modules/)
            .add(/\.ice\//)
            .add(/\.rax\//)
            .end()
            .use('inspector')
            .loader(path.join(__dirname, '../webpack/inspector-loader'))
            .options({})
            .end();
        // add webpack dev server middleware for launch IDE app with api request
        const originalDevServeBefore = config.devServer.get('before');
        config.merge({
            devServer: {
                before(app, server) {
                    app.get('*', middlewares_1.launchEditorMiddleware);
                    if (typeof originalDevServeBefore === 'function') {
                        originalDevServeBefore(app, server);
                    }
                },
            },
        });
    });
};
exports.default = plugin;
