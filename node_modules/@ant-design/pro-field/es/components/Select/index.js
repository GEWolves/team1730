import "antd/es/spin/style";
import _Spin from "antd/es/spin";
import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import "antd/es/space/style";
import _Space from "antd/es/space";
var _excluded = ["value", "text"],
    _excluded2 = ["mode", "valueEnum", "render", "renderFormItem", "request", "fieldProps", "plain", "children", "light", "proFieldKey", "params", "label", "bordered", "id"];
import { useMemo } from 'react';
import React, { useState, useImperativeHandle, useRef, useContext, useCallback, useEffect } from 'react';
import { useDebounceFn, nanoid, useDeepCompareEffect, useMountMergeState } from '@ant-design/pro-utils';
import useSWR from 'swr';
import { useIntl } from '@ant-design/pro-provider';
import LightSelect from './LightSelect';
import SearchSelect from './SearchSelect';
import TableStatus, { ProFieldBadgeColor } from '../Status';
import './index.less';
export var ObjToMap = function ObjToMap(value) {
  if (getType(value) === 'map') {
    return value;
  }

  return new Map(Object.entries(value || {}));
};
/**
 * 转化 text 和 valueEnum 通过 type 来添加 Status
 *
 * @param text
 * @param valueEnum
 * @param pure 纯净模式，不增加 status
 */

export var proFieldParsingText = function proFieldParsingText(text, valueEnumParams) {
  if (Array.isArray(text)) {
    return /*#__PURE__*/React.createElement(_Space, null, text.map(function (value) {
      return (
        /*#__PURE__*/
        // @ts-ignore
        React.createElement(React.Fragment, {
          key: (value === null || value === void 0 ? void 0 : value.value) || value
        }, proFieldParsingText(value, valueEnumParams))
      );
    }));
  }

  var valueEnum = ObjToMap(valueEnumParams);

  if (!valueEnum.has(text) && !valueEnum.has("".concat(text))) {
    // @ts-ignore
    return (text === null || text === void 0 ? void 0 : text.label) || text;
  }

  var domText = valueEnum.get(text) || valueEnum.get("".concat(text));

  if (!domText) {
    // @ts-ignore
    return (text === null || text === void 0 ? void 0 : text.label) || text;
  }

  var status = domText.status,
      color = domText.color;
  var Status = TableStatus[status || 'Init']; // 如果类型存在优先使用类型

  if (Status) {
    return /*#__PURE__*/React.createElement(Status, null, domText.text);
  } // 如果不存在使用颜色


  if (color) {
    return /*#__PURE__*/React.createElement(ProFieldBadgeColor, {
      color: color
    }, domText.text);
  } // 什么都没有使用 text


  return domText.text || domText;
};

var Highlight = function Highlight(_ref) {
  var label = _ref.label,
      words = _ref.words;
  var REG_LIST = '.^$*+-?()[]{}\\|';

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var lightCls = getPrefixCls('pro-select-item-option-content-light');
  var optionCls = getPrefixCls('pro-select-item-option-content');
  var reg = new RegExp(words.map(function (word) {
    return word.split('').map(function (w) {
      return REG_LIST.includes(w) ? "\\".concat(w) : w;
    }).join('');
  }).join('|'), 'gi');
  var token = label.replace(reg, '#@$&#');
  var elements = token.split('#').map(function (x) {
    return x[0] === '@' ? /*#__PURE__*/React.createElement('span', {
      className: lightCls
    }, x.slice(1)) : x;
  });
  return /*#__PURE__*/React.createElement.apply(React, ['div', {
    className: optionCls
  }].concat(_toConsumableArray(elements)));
};
/**
 * 获取类型的 type
 *
 * @param obj
 */


function getType(obj) {
  // @ts-ignore
  var type = Object.prototype.toString.call(obj).match(/^\[object (.*)\]$/)[1].toLowerCase();
  if (type === 'string' && _typeof(obj) === 'object') return 'object'; // Let "new String('')" return 'object'

  if (obj === null) return 'null'; // PhantomJS has type "DOMWindow" for null

  if (obj === undefined) return 'undefined'; // PhantomJS has type "DOMWindow" for undefined

  return type;
}
/**
 * 递归筛选 item
 *
 * @param item
 * @param keyWords
 * @returns
 */


function filerByItem(item, keyWords) {
  var _item$label, _item$value;

  if (!keyWords) return true;

  if ((item === null || item === void 0 ? void 0 : (_item$label = item.label) === null || _item$label === void 0 ? void 0 : _item$label.toString().toLowerCase().includes(keyWords.toLowerCase())) || (item === null || item === void 0 ? void 0 : (_item$value = item.value) === null || _item$value === void 0 ? void 0 : _item$value.toString().toLowerCase().includes(keyWords.toLowerCase()))) {
    return true;
  }

  if (item.optionType === 'optGroup' && (item.children || item.options)) {
    var findItem = [].concat(_toConsumableArray(item.children || []), [item.options || []]).find(function (mapItem) {
      return filerByItem(mapItem, keyWords);
    });
    if (findItem) return true;
  }

  return false;
}
/**
 * 把 value 的枚举转化为数组
 *
 * @param valueEnum
 */


export var proFieldParsingValueEnumToArray = function proFieldParsingValueEnumToArray(valueEnumParams) {
  var enumArray = [];
  var valueEnum = ObjToMap(valueEnumParams);
  valueEnum.forEach(function (_, key) {
    var value = valueEnum.get(key) || valueEnum.get("".concat(key));

    if (!value) {
      return;
    }

    if (_typeof(value) === 'object' && (value === null || value === void 0 ? void 0 : value.text)) {
      enumArray.push({
        text: value === null || value === void 0 ? void 0 : value.text,
        value: key,
        label: value === null || value === void 0 ? void 0 : value.text,
        disabled: value.disabled
      });
      return;
    }

    enumArray.push({
      text: value,
      value: key
    });
  });
  return enumArray;
};
export var useFieldFetchData = function useFieldFetchData(props) {
  var _props$fieldProps, _ref4, _props$debounceTime, _props$fieldProps3, _props$fieldProps6;

  var _useState = useState(props.defaultKeyWords),
      _useState2 = _slicedToArray(_useState, 2),
      keyWords = _useState2[0],
      setKeyWords = _useState2[1];
  /** Key 是用来缓存请求的，如果不在是有问题 */


  var _useState3 = useState(function () {
    if (props.proFieldKey) {
      return props.proFieldKey.toString();
    }

    if (props.request) {
      return nanoid();
    }

    return 'no-fetch';
  }),
      _useState4 = _slicedToArray(_useState3, 1),
      cacheKey = _useState4[0];

  var proFieldKeyRef = useRef(cacheKey);
  var getOptionsFormValueEnum = useCallback(function (valueEnum) {
    return proFieldParsingValueEnumToArray(ObjToMap(valueEnum)).map(function (_ref2) {
      var value = _ref2.value,
          text = _ref2.text,
          rest = _objectWithoutProperties(_ref2, _excluded);

      return _objectSpread({
        label: text,
        value: value,
        key: value
      }, rest);
    });
  }, []);

  var _useMountMergeState = useMountMergeState(function () {
    if (props.valueEnum) {
      return getOptionsFormValueEnum(props.valueEnum);
    }

    return [];
  }, {
    value: (_props$fieldProps = props.fieldProps) === null || _props$fieldProps === void 0 ? void 0 : _props$fieldProps.options
  }),
      _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),
      options = _useMountMergeState2[0],
      setOptions = _useMountMergeState2[1];

  useDeepCompareEffect(function () {
    var _props$fieldProps2;

    // 优先使用 fieldProps?.options
    if (!props.valueEnum || ((_props$fieldProps2 = props.fieldProps) === null || _props$fieldProps2 === void 0 ? void 0 : _props$fieldProps2.options)) return;
    setOptions(getOptionsFormValueEnum(props.valueEnum));
  }, [props.valueEnum]);

  var _useMountMergeState3 = useMountMergeState(false),
      _useMountMergeState4 = _slicedToArray(_useMountMergeState3, 2),
      loading = _useMountMergeState4[0],
      setLoading = _useMountMergeState4[1];

  var _useDebounceFn = useDebounceFn( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
      var loadData;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (props.request) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", []);

            case 2:
              setLoading(true);
              _context.next = 5;
              return props.request(params, props);

            case 5:
              loadData = _context.sent;
              setLoading(false);
              return _context.abrupt("return", loadData);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [], (_ref4 = (_props$debounceTime = props.debounceTime) !== null && _props$debounceTime !== void 0 ? _props$debounceTime : props === null || props === void 0 ? void 0 : (_props$fieldProps3 = props.fieldProps) === null || _props$fieldProps3 === void 0 ? void 0 : _props$fieldProps3.debounceTime) !== null && _ref4 !== void 0 ? _ref4 : 0, // 因为使用了swr，自动清理请求可能导致缓存错误的数据
  true),
      fetchData = _useDebounceFn.run;

  var _useSWR = useSWR(function () {
    if (!props.request) {
      return null;
    }

    return [proFieldKeyRef.current, props.params, keyWords];
  }, function (_, params, kw) {
    return fetchData(_objectSpread(_objectSpread({}, params), {}, {
      keyWords: kw
    }));
  }, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    shouldRetryOnError: false,
    revalidateOnReconnect: false
  }),
      data = _useSWR.data,
      setLocaleData = _useSWR.mutate;

  var resOptions = useMemo(function () {
    var _props$fieldProps4, _props$fieldProps5;

    var opt = options === null || options === void 0 ? void 0 : options.map(function (item) {
      if (typeof item === 'string') {
        return {
          label: item,
          value: item
        };
      }

      if ((item === null || item === void 0 ? void 0 : item.optionType) === 'optGroup' && (item.children || item.options)) {
        var childrenOptions = [].concat(_toConsumableArray(item.children || []), _toConsumableArray(item.options || [])).filter(function (mapItem) {
          return filerByItem(mapItem, keyWords);
        });
        return _objectSpread(_objectSpread({}, item), {}, {
          children: childrenOptions,
          options: childrenOptions
        });
      }

      return item;
    }); // filterOption 为 true 时 filter数据, filterOption 默认为true

    if (((_props$fieldProps4 = props.fieldProps) === null || _props$fieldProps4 === void 0 ? void 0 : _props$fieldProps4.filterOption) === true || ((_props$fieldProps5 = props.fieldProps) === null || _props$fieldProps5 === void 0 ? void 0 : _props$fieldProps5.filterOption) === undefined) {
      return opt === null || opt === void 0 ? void 0 : opt.filter(function (item) {
        if (!item) return false;
        if (!keyWords) return true;
        return filerByItem(item, keyWords);
      });
    }

    return opt;
  }, [options, keyWords, (_props$fieldProps6 = props.fieldProps) === null || _props$fieldProps6 === void 0 ? void 0 : _props$fieldProps6.filterOption]);
  return [loading, props.request ? data : resOptions, function (fetchKeyWords) {
    setKeyWords(fetchKeyWords);
  }, function () {
    setKeyWords(undefined);
    setLocaleData([], false);
  }];
};
/**
 * 可以根据 valueEnum 来进行类型的设置
 *
 * @param
 */

var FieldSelect = function FieldSelect(props, ref) {
  var mode = props.mode,
      valueEnum = props.valueEnum,
      render = props.render,
      renderFormItem = props.renderFormItem,
      request = props.request,
      fieldProps = props.fieldProps,
      plain = props.plain,
      children = props.children,
      light = props.light,
      proFieldKey = props.proFieldKey,
      params = props.params,
      label = props.label,
      bordered = props.bordered,
      id = props.id,
      rest = _objectWithoutProperties(props, _excluded2);

  var inputRef = useRef();
  var intl = useIntl();
  var keyWordsRef = useRef('');
  var fieldNames = fieldProps.fieldNames;

  var _ref5 = fieldNames || {},
      _ref5$label = _ref5.label,
      labelPropsName = _ref5$label === void 0 ? 'label' : _ref5$label,
      _ref5$value = _ref5.value,
      valuePropsName = _ref5$value === void 0 ? 'value' : _ref5$value,
      _ref5$options = _ref5.options,
      optionsPropsName = _ref5$options === void 0 ? 'options' : _ref5$options;

  useEffect(function () {
    keyWordsRef.current = fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.searchValue;
  }, [fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.searchValue]);

  var _useFieldFetchData = useFieldFetchData(props),
      _useFieldFetchData2 = _slicedToArray(_useFieldFetchData, 4),
      loading = _useFieldFetchData2[0],
      options = _useFieldFetchData2[1],
      _fetchData = _useFieldFetchData2[2],
      resetData = _useFieldFetchData2[3];

  var size = useContext(_ConfigProvider.SizeContext);
  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, inputRef.current || {}), {}, {
      fetchData: function fetchData() {
        return _fetchData();
      }
    });
  });
  var optionsValueEnum = useMemo(function () {
    var traverseOptions = function traverseOptions(_options) {
      return (_options === null || _options === void 0 ? void 0 : _options.length) > 0 ? _options === null || _options === void 0 ? void 0 : _options.reduce(function (pre, cur) {
        var curLabel = cur[labelPropsName],
            curValue = cur[valuePropsName],
            curOptions = cur[optionsPropsName];
        return _objectSpread(_objectSpread({}, pre), {}, _defineProperty({}, curValue, curLabel), traverseOptions(curOptions));
      }, {}) : {};
    };

    return traverseOptions(options);
  }, [labelPropsName, options, optionsPropsName, valuePropsName]);

  if (mode === 'read') {
    var dom = /*#__PURE__*/React.createElement(React.Fragment, null, proFieldParsingText(rest.text, ObjToMap(valueEnum || optionsValueEnum)));

    if (render) {
      return render(rest.text, _objectSpread({
        mode: mode
      }, fieldProps), dom) || null;
    }

    return dom;
  }

  if (mode === 'edit' || mode === 'update') {
    var renderDom = function renderDom() {
      if (light) {
        return /*#__PURE__*/React.createElement(LightSelect, _extends({
          bordered: bordered,
          id: id,
          loading: loading,
          ref: inputRef,
          allowClear: true,
          size: size,
          options: options,
          label: label,
          placeholder: intl.getMessage('tableForm.selectPlaceholder', '请选择')
        }, fieldProps));
      }

      return /*#__PURE__*/React.createElement(SearchSelect, _extends({
        key: "SearchSelect",
        style: {
          minWidth: 100
        },
        bordered: bordered,
        id: id,
        loading: loading,
        ref: inputRef,
        allowClear: true,
        notFoundContent: loading ? /*#__PURE__*/React.createElement(_Spin, {
          size: "small"
        }) : fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.notFoundContent,
        fetchData: function fetchData(keyWord) {
          keyWordsRef.current = keyWord;

          _fetchData(keyWord);
        },
        resetData: resetData,
        optionItemRender: function optionItemRender(item) {
          if (typeof item.label === 'string' && keyWordsRef.current) {
            return /*#__PURE__*/React.createElement(Highlight, {
              label: item.label,
              words: [keyWordsRef.current]
            });
          }

          return item.label;
        },
        placeholder: intl.getMessage('tableForm.selectPlaceholder', '请选择'),
        label: label
      }, fieldProps, {
        options: options
      }));
    };

    var _dom = renderDom();

    if (renderFormItem) {
      return renderFormItem(rest.text, _objectSpread(_objectSpread({
        mode: mode
      }, fieldProps), {}, {
        options: options
      }), _dom) || null;
    }

    return _dom;
  }

  return null;
};

export default /*#__PURE__*/React.forwardRef(FieldSelect);