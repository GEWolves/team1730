"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd/es/dropdown/style");

var _dropdown = _interopRequireDefault(require("antd/es/dropdown"));

require("antd/es/space/style");

var _space = _interopRequireDefault(require("antd/es/space"));

require("antd/es/menu/style");

var _menu = _interopRequireDefault(require("antd/es/menu"));

require("antd/es/tabs/style");

var _tabs = _interopRequireDefault(require("antd/es/tabs"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _icons = require("@ant-design/icons");

var _classnames = _interopRequireDefault(require("classnames"));

var _useMergedState3 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

require("./index.less");

var _excluded = ["label", "key"];

var HeaderMenu = function HeaderMenu(props) {
  var _props$items = props.items,
      items = _props$items === void 0 ? [] : _props$items,
      _props$type = props.type,
      type = _props$type === void 0 ? 'inline' : _props$type,
      prefixCls = props.prefixCls,
      propActiveKey = props.activeKey;

  var _useMergedState = (0, _useMergedState3.default)(propActiveKey, {
    value: propActiveKey,
    onChange: props.onChange
  }),
      _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2),
      activeKey = _useMergedState2[0],
      setActiveKey = _useMergedState2[1];

  if (items.length < 1) {
    return null;
  }

  var activeItem = items.find(function (item) {
    return item.key === activeKey;
  }) || items[0];

  if (type === 'inline') {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("".concat(prefixCls, "-menu"), "".concat(prefixCls, "-inline-menu"))
    }, items.map(function (item, index) {
      return /*#__PURE__*/_react.default.createElement("div", {
        key: item.key || index,
        onClick: function onClick() {
          setActiveKey(item.key);
        },
        className: (0, _classnames.default)("".concat(prefixCls, "-inline-menu-item"), activeItem.key === item.key ? "".concat(prefixCls, "-inline-menu-item-active") : undefined)
      }, item.label);
    }));
  }

  if (type === 'tab') {
    return /*#__PURE__*/_react.default.createElement(_tabs.default, {
      activeKey: activeItem.key,
      onTabClick: function onTabClick(key) {
        return setActiveKey(key);
      }
    }, items.map(function (_ref, index) {
      var label = _ref.label,
          key = _ref.key,
          rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return /*#__PURE__*/_react.default.createElement(_tabs.default.TabPane, (0, _extends2.default)({
        tab: label,
        key: key || index
      }, rest));
    }));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(prefixCls, "-menu"), "".concat(prefixCls, "-dropdownmenu"))
  }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    trigger: ['click'],
    overlay: /*#__PURE__*/_react.default.createElement(_menu.default, {
      selectedKeys: [activeItem.key],
      onClick: function onClick(item) {
        setActiveKey(item.key);
      }
    }, items.map(function (item, index) {
      return /*#__PURE__*/_react.default.createElement(_menu.default.Item, {
        key: item.key || index,
        disabled: item.disabled
      }, item.label);
    }))
  }, /*#__PURE__*/_react.default.createElement(_space.default, {
    className: "".concat(prefixCls, "-dropdownmenu-label")
  }, activeItem.label, /*#__PURE__*/_react.default.createElement(_icons.DownOutlined, null))));
};

var _default = HeaderMenu;
exports.default = _default;