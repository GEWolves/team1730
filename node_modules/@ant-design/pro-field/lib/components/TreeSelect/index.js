"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd/es/spin/style");

var _spin = _interopRequireDefault(require("antd/es/spin"));

require("antd/es/tree-select/style");

var _treeSelect = _interopRequireDefault(require("antd/es/tree-select"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

require("antd/es/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/es/config-provider"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Select = require("../Select");

var _excluded = ["radioType", "renderFormItem", "mode", "render"],
    _excluded2 = ["onSearch", "onClear", "onChange", "onBlur", "loadData", "showSearch", "autoClearSearchValue", "searchValue"];

/**
 * Tree select
 *
 * @param param0
 * @param ref
 */
var FieldTreeSelect = function FieldTreeSelect(_ref, ref) {
  var radioType = _ref.radioType,
      renderFormItem = _ref.renderFormItem,
      mode = _ref.mode,
      render = _ref.render,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useContext = (0, _react.useContext)(_configProvider.default.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var layoutClassName = getPrefixCls('pro-field-tree-select');
  var treeSelectRef = (0, _react.useRef)(null);

  var _ref2 = rest.fieldProps || {},
      _onSearch = _ref2.onSearch,
      _onClear = _ref2.onClear,
      propsOnChange = _ref2.onChange,
      _onBlur = _ref2.onBlur,
      loadData = _ref2.loadData,
      showSearch = _ref2.showSearch,
      autoClearSearchValue = _ref2.autoClearSearchValue,
      _ref2$searchValue = _ref2.searchValue,
      propsSearchValue = _ref2$searchValue === void 0 ? '' : _ref2$searchValue,
      fieldProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);

  var _useFieldFetchData = (0, _Select.useFieldFetchData)((0, _objectSpread3.default)((0, _objectSpread3.default)({}, rest), {}, {
    defaultKeyWords: propsSearchValue
  })),
      _useFieldFetchData2 = (0, _slicedToArray2.default)(_useFieldFetchData, 3),
      loading = _useFieldFetchData2[0],
      options = _useFieldFetchData2[1],
      _fetchData = _useFieldFetchData2[2];

  var _useState = (0, _react.useState)(propsSearchValue),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      searchValue = _useState2[0],
      setSearchValue = _useState2[1];

  (0, _react.useImperativeHandle)(ref, function () {
    return (0, _objectSpread3.default)((0, _objectSpread3.default)({}, treeSelectRef.current || {}), {}, {
      fetchData: function fetchData() {
        return _fetchData();
      }
    });
  });
  var optionsValueEnum = (0, _react.useMemo)(function () {
    /**
     * Support TreeSelect fieldNames
     *
     * @see https://ant.design/components/tree-select-cn
     */
    var _ref3 = (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.fieldNames) || {},
        _ref3$value = _ref3.value,
        valuePropsName = _ref3$value === void 0 ? 'value' : _ref3$value,
        _ref3$label = _ref3.label,
        labelPropsName = _ref3$label === void 0 ? 'label' : _ref3$label,
        _ref3$children = _ref3.children,
        childrenPropsName = _ref3$children === void 0 ? 'children' : _ref3$children;

    var traverseOptions = function traverseOptions(_options) {
      return (_options === null || _options === void 0 ? void 0 : _options.length) > 0 ? _options === null || _options === void 0 ? void 0 : _options.reduce(function (pre, cur) {
        var label = cur[labelPropsName],
            value = cur[valuePropsName],
            children = cur[childrenPropsName];
        return (0, _objectSpread3.default)((0, _objectSpread3.default)({}, pre), {}, (0, _defineProperty2.default)({}, value, label), traverseOptions(children));
      }, {}) : {};
    };

    return traverseOptions(options);
  }, [options, fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.fieldNames]);

  var onChange = function onChange(value, optionList, extra) {
    // 将搜索框置空 和 antd 行为保持一致
    if (showSearch && autoClearSearchValue) {
      _fetchData('');

      _onSearch === null || _onSearch === void 0 ? void 0 : _onSearch('');
      setSearchValue('');
    }
    /** Fix: TreeSelect warningProps 和TreeSelect结果保持一致 */


    propsOnChange === null || propsOnChange === void 0 ? void 0 : propsOnChange(value, optionList, extra);
  };

  if (mode === 'read') {
    var dom = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _Select.proFieldParsingText)(rest.text, (0, _Select.ObjToMap)(rest.valueEnum || optionsValueEnum)));

    if (render) {
      return render(rest.text, (0, _objectSpread3.default)({
        mode: mode
      }, fieldProps), dom) || null;
    }

    return dom;
  }

  if (mode === 'edit') {
    var _dom = /*#__PURE__*/_react.default.createElement(_spin.default, {
      spinning: loading
    }, /*#__PURE__*/_react.default.createElement(_treeSelect.default, (0, _extends2.default)({
      ref: treeSelectRef
    }, fieldProps, {
      treeData: options,
      showSearch: showSearch,
      searchValue: searchValue,
      autoClearSearchValue: autoClearSearchValue,
      onClear: function onClear() {
        _onClear === null || _onClear === void 0 ? void 0 : _onClear();

        _fetchData('');

        if (showSearch) {
          setSearchValue('');
        }
      },
      loadData: loadData ? function (node) {
        var _node$value;

        _fetchData((_node$value = node.value) === null || _node$value === void 0 ? void 0 : _node$value.toString());

        return (loadData === null || loadData === void 0 ? void 0 : loadData(node)) || Promise.resolve();
      } : undefined,
      onChange: onChange,
      onSearch: function onSearch(value) {
        _fetchData(value);

        _onSearch === null || _onSearch === void 0 ? void 0 : _onSearch(value);
        setSearchValue(value);
      },
      onBlur: function onBlur(event) {
        setSearchValue('');

        _fetchData('');

        _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(event);
      },
      className: (0, _classnames.default)(fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.className, layoutClassName)
    })));

    if (renderFormItem) {
      return renderFormItem(rest.text, (0, _objectSpread3.default)({
        mode: mode
      }, fieldProps), _dom) || null;
    }

    return _dom;
  }

  return null;
};

var _default = /*#__PURE__*/_react.default.forwardRef(FieldTreeSelect);

exports.default = _default;