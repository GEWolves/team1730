import "antd/es/upload/style";
import _Upload from "antd/es/upload";
import "antd/es/button/style";
import _Button from "antd/es/button";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { UploadOutlined } from '@ant-design/icons';
import createField from '../../BaseForm/createField';
/**
 * 上传按钮组件
 *
 * @param
 */

var ProFormUploadButton = function ProFormUploadButton(_ref, ref) {
  var fieldProps = _ref.fieldProps,
      name = _ref.name,
      action = _ref.action,
      accept = _ref.accept,
      listType = _ref.listType,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? '单击上传' : _ref$title,
      max = _ref.max,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? /*#__PURE__*/React.createElement(UploadOutlined, null) : _ref$icon,
      value = _ref.value,
      buttonProps = _ref.buttonProps,
      _onChange = _ref.onChange,
      disabled = _ref.disabled,
      proFieldProps = _ref.proFieldProps,
      fileList = _ref.fileList;
  // 如果配置了 max ，并且 超过了文件列表的大小，就不展示按钮
  var showUploadButton = (max === undefined || !value || (value === null || value === void 0 ? void 0 : value.length) < max) && (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.mode) !== 'read';
  var isPictureCard = (listType !== null && listType !== void 0 ? listType : fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.listType) === 'picture-card';
  return /*#__PURE__*/React.createElement(_Upload, _extends({
    action: action,
    accept: accept,
    ref: ref // 'fileList' 改成和 ant.design 文档中 Update 组件 默认 file字段一样
    ,
    name: name || 'file',
    listType: listType || 'picture',
    fileList: fileList !== null && fileList !== void 0 ? fileList : value
  }, fieldProps, {
    onChange: function onChange(info) {
      var _fieldProps$onChange;

      _onChange === null || _onChange === void 0 ? void 0 : _onChange(info);
      fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$onChange = fieldProps.onChange) === null || _fieldProps$onChange === void 0 ? void 0 : _fieldProps$onChange.call(fieldProps, info);
    }
  }), showUploadButton && (isPictureCard ? /*#__PURE__*/React.createElement("span", null, icon, " ", title) : /*#__PURE__*/React.createElement(_Button, _extends({
    disabled: disabled || (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.disabled)
  }, buttonProps), icon, title)));
};

export default createField( /*#__PURE__*/React.forwardRef(ProFormUploadButton), {
  getValueFromEvent: function getValueFromEvent(value) {
    return value.fileList;
  }
});